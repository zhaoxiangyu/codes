<project name="jpVocParser" basedir="../.." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">
	<import file="${basedir}/../AntTask/ant/env-setting.xml" />
	<import file="${basedir}/../AntTask/ant/common-tools.xml" />
	<import file="${basedir}/../AntTask/ant/ivy-tools.xml"/>
	<import file="${basedir}/../AntTask/ant/use-android-tools.xml"/>

	<property name="java.src.dir" location="src"/>
	<property name="javac.out.dir" location="bin/ant/classes"/>
	<property name="jar.out.file" location="bin/ant/classes.jar"/>
	<property name="javah.out.dir" location="jni/gen/javah/jpVocParser"/>
	
	<property name="jni.libname" value="vocabulary"/>
	<property name="jni.libdir" location="bin/jni"/>
	<property name="jni.srcdir" location="jni/src"/>
	
	<!-- ================================= 
          target: default target              
         ================================= -->
    <target name="default">
    	<!--
    	<antcall target="prepare-jpVoc"></antcall>

    	<antcall target="cparser-ndk-build"></antcall>
		<antcall target="emulator-start-android2.1" /> 
		<antcall target="cparser-ndk-run"></antcall>

		<antcall target="gen-code"></antcall>
        <antcall target="build-javaParser"></antcall>
        <antcall target="run-javaParser"></antcall>
        <antcall target="package-jpVocParser"></antcall>

		<antcall target="gen-code"></antcall>
		<antcall target="cparser-ndk-jnibuild"></antcall>
		<antcall target="cparser-ndkjni-install"></antcall>
    	
		<antcall target="cparser-build"></antcall>
		<antcall target="cparser-run"></antcall>

		<antcall target="gen-code"></antcall>
		<antcall target="cparser-jnibuild"></antcall>
		<antcall target="cparser-jnirun"></antcall>

		<antcall target="gen-code"></antcall>
		<antcall target="cparser-ndk-jnibuild2"></antcall>
		<antcall target="cparser-ndkjni-install2"></antcall>
    	-->

    	<antcall target="prepare-jpVoc"></antcall>
    	<antcall target="build-javaParser"/>
    	<java classname="org.sharp.parser.antlr.ToJsonFile">
    		<classpath>
    			<pathelement location="${javac.out.dir}"/>
				<path refid="atlr3.classpath"></path>
    			<pathelement location="libs/gson-2.1.jar"/>
    		</classpath>
    		<arg line="${basedir}/bin/voca.filenames ${basedir}/bin/voca.json"/>
    	</java>
    </target>
	
	<target name="cparser-ndkjni-install">
		<jar destfile="bin/ant/jpVocJni.jar">
			<fileset dir="bin/ant/classes" includes="org/sharp/vocreader/**"></fileset>
		</jar>
		<copy todir="${prj.android.dir}/smartqApp/libs" file="bin/ant/jpVocJni.jar"/>
		<mkdir dir="${prj.android.dir}/smartqApp/libs/armeabi"/>
		<copy todir="${prj.android.dir}/smartqApp/libs/armeabi" file="bin/ndk-jni/libvocabulary.so"/>
	</target>

	<target name="package-jpVocParser" depends="build-javaParser">
		<jar destfile="bin/ant/jpVocParser.jar">
			<fileset dir="bin/ant/classes" includes="org/sharp/parser/**/*"></fileset>
		</jar>
		<!--
		<antcall target="setup-ivy-repo"/>
		<ivy:resolve organisation="${ivy.organisation}" module="jpVocParser" 
			revision="1.0" inline="true" />
		<ivy:resolve/>
		<ivy:deliver module="jpVocParser"/>
		-->
		<ivy:retrieve/>
		<ivy:publish resolver="local" update="true" overwrite="true">
		   	<artifacts pattern="bin/ant/[artifact].[ext]"/>
			<artifacts pattern="${antlr.dir}/[artifact].[ext]"/>
			<!--
			<artifact name="antlr3.4" url="${antlr.dir}/antlr-3.4-complete.jar"/>
			-->
		</ivy:publish>
	</target>
	
	<target name="cparser-jnirun">
		<echo>-Djava.library.path=${jni.libdir}</echo>
    	<java classname="org.sharp.vocreader.jni.Main" 
    		classpath="${javac.out.dir}" fork="true">
    		<jvmarg value="-Djava.library.path=${jni.libdir}"/>
    		<arg line="${basedir}/bin/voca.filenames"/>
    	</java>
	</target>
	
	<target name="compile">
		<mkdir dir="${javac.out.dir}"/>
		<javac srcdir="${java.src.dir}" destdir="${javac.out.dir}"/>
		<jar destfile="${jar.out.file}" basedir="${javac.out.dir}"/>
	</target>

	<target name="gen-code">
		<antcall target="compile"></antcall>
		
		<delete dir="${javah.out.dir}"/>
		<mkdir dir="${javah.out.dir}"/>
		<javah destdir="${javah.out.dir}"
			classpath="${javac.out.dir}" verbose="yes">
			<class name="org.sharp.vocreader.jni.VocabularySupport"/>
		</javah>
		
		<antlr3 target="antlr/grammar/c/JpVocabulary.g"
		    outputdirectory="antlr/gen/c"/>
		<delete dir="antlr/gen/java"/>
		<mkdir dir="antlr/gen/java"/>
		<antlr3 target="antlr/grammar/java/JpVocabulary.g"
		    outputdirectory="antlr/gen/java/org/sharp/parser/antlr"/>
	</target>
	
	<target name="cparser-ndk-jnibuild">
		<path id="jni.srcfiles">
			<fileset dir="${jni.srcdir}/jpVocParser" 
				includes="**/jpVoc.c,**/vocabularySupport.cpp"
				excludes="**/jpVocMain.c, **/vocabularySupport.c">
			</fileset>
		</path>
		<pathconvert property="jni.srcfilelist" pathsep=" " refid="jni.srcfiles"/>
		<make makefile="build/make/jpVocParser-ndk.mk" 
			target="jnilib">
			<vars>
				<env key="MODULE_NAME" value="${jni.libname}"/>
				<env key="JNISRC_DIR" value="${jni.srcdir}/jpVocParser"/>
				<env key="JNISRC_FILES" value="${jni.srcfilelist}"/>
				<env key="SRC_DIR" value="antlr/gen/c"/>
				<env key="LIB_NAMES" value="antlr3c"/>
				<env key="INC_PATH" value="${javah.out.dir}:antlr/gen/c:${jni.srcdir}:${jni.srcdir}/jpVocParser"/>
			</vars>
		</make>
	</target>

	<target name="cparser-ndk-jnibuild2">
		<make makefile="build/make/jpVocParser-ndk2.mk" 
			target="ndk_build">
		</make>
	</target>

	<target name="cparser-ndkjni-install2">
		<jar destfile="bin/ant/jpVocJni.jar">
			<fileset dir="bin/ant/classes" includes="org/sharp/vocreader/**"></fileset>
		</jar>
		<copy todir="${prj.android.dir}/smartqApp/libs" file="bin/ant/jpVocJni.jar"/>
		<mkdir dir="${prj.android.dir}/smartqApp/libs/armeabi"/>
		<copy todir="${prj.android.dir}/smartqApp/libs/armeabi" file="libs/armeabi/libvocabulary.so"/>
	</target>

	<target name="cparser-jnibuild">
		<path id="jni.srcfiles">
			<fileset dir="${jni.srcdir}" 
				includes="jpVocParser/**/jpVoc.c,jpVocParser/**/vocabularySupport.cpp,**/jniUtils.cpp"
				excludes="jpVocParser/**/jpVocMain.c">
			</fileset>
		</path>
		<pathconvert property="jni.srcfilelist" pathsep=" " refid="jni.srcfiles"/>
		<make makefile="build/make/jpVocParser.mk" 
			target="jnilib">
			<vars>
				<env key="MODULE_NAME" value="${jni.libname}"/>
				<env key="JNI_DIR" value="${jni.libdir}"/>
				<env key="JNISRC_DIR" value="${jni.srcdir}"/>
				<env key="JNISRC_FILES" value="${jni.srcfilelist}"/>
				<env key="SRC_DIR" value="antlr/gen/c"/>
				<env key="LIB_NAMES" value="antlr3c"/>
				<env key="INC_PATH" value="${javah.out.dir}:antlr/gen/c:${jni.srcdir}:${jni.srcdir}/jpVocParser"/>
				<!--
				<env key="LIB_PATH" value="lib1:lib2"/>
				<env key="JNISRC_FILES" value=""/>
				-->
			</vars>
		</make>
	</target>

	<target name="cparser-build">
		<path id="gen.srcfiles">
			<fileset dir="${basedir}" 
				includes="antlr/gen/c/*.c,jni/src/jpVocParser/jpVoc.c">
			</fileset>
		</path>
		<pathconvert property="gen.srcfilelist" pathsep=" " refid="gen.srcfiles"/>
		<make makefile="build/make/jpVocParser.mk" 
			target="build">
			<vars>
				<env key="MODULE_NAME" value="jpVoc"/>
				<env key="SRC_DIR" value="${basedir}"/>
				<env key="SRC_FILES" value="${gen.srcfilelist}"/>
				<env key="MAIN_SRC" value="jni/src/jpVocParser/jpVocMain.c"/>
				<env key="LIB_NAMES" value="antlr3c"/>
				<env key="INC_PATH" value="antlr/gen/c"/>
				<!--
				<env key="LIB_PATH" value="lib1:lib2"/>
				<env key="JNISRC_FILES" value=""/>
				-->
			</vars>
		</make>
	</target>

	<target name="cparser-run">
		<make 
			makefile="build/make/jpVocParser.mk" 
			target="run-dynamiclink">
			<vars>
				<env key="MODULE_NAME" value="jpVoc"/>
				<env key="PROG_ARGS" value="${basedir}/bin/voca.filenames > ~/voca.html"/>
				<!--
				-->
			</vars>
		</make>
		<!--
		<cmd2 executable="bin/out/jpVoc-sl"
			line="${basedir}/bin/voca.filenames"/>
		<make makefile="build/make/jpVocParser.mk" 
			target="run-staticlink"/>
		-->
	</target>

	<target name="cparser-ndk-build">
		<path id="gen.srcfiles">
			<fileset dir="${basedir}" 
				includes="antlr/gen/c/*.c,jni/src/jpVocParser/jpVoc.c">
			</fileset>
		</path>
		<pathconvert property="gen.srcfilelist" pathsep=" " refid="gen.srcfiles"/>
		<make makefile="build/make/jpVocParser-ndk.mk" 
			target="build">
			<vars>
				<env key="MODULE_NAME" value="jpVoc"/>
				<env key="SRC_DIR" value="${basedir}"/>
				<env key="SRC_FILES" value="${gen.srcfilelist}"/>
				<env key="MAIN_SRC" value="jni/src/jpVocParser/jpVocMain.c"/>
				<env key="LIB_NAMES" value="antlr3c"/>
				<env key="INC_PATH" value="antlr/gen/c"/>
			</vars>
		</make>
	</target>

	<target name="cparser-ndk-run">
		<property name="emulator.tmp.dir" value="/cache"/>
		<parallel>
			<sequential>
				<adb-push file="bin/ndk-out/jpVoc-dl" 
					to="${emulator.tmp.dir}"/>
				<adb-push file="bin/ndk-lib/libjpVoc.so" 
					to="${emulator.tmp.dir}"/>
				<adb-shell cmd="cd ${emulator.tmp.dir}; export LD_LIBRARY_PATH=${emulator.tmp.dir}:$LD_LIBRARY_PATH; echo $LD_LIBRARY_PATH; ./jpVoc-dl"/>
			</sequential>
		</parallel>
	</target>

	<target name="prepare-jpVocx">
		<batch-rename dir="${VMSHARE.DIR}/temp/1" 
			todir="${user.home}/temp/rename/6" 
			from="^(.*)(/?)([^/]*)〔([^/]*)\.mp3$$" to="\1\2\3[\4.mp3"/>
		<batch-rename dir="${user.home}/temp/rename/6" 
			todir="${user.home}/temp/rename/B1" 
			from="^(.*)(/?)([^/]*)〕([^/]*)\.mp3$$" to="\1\2\3]\4.mp3"/>
		<batch-rename dir="${user.home}/temp/rename/B1" 
			todir="${user.home}/temp/rename/C1/a1" 
			from="^([^\[]*)\.mp3$$" to="\1.mp3"
			nomatchcopy="false"/>
		<batch-rename dir="${user.home}/temp/rename/B1" 
			todir="${user.home}/temp/rename/C1/b1" 
			from="^([^\[]*)\[(.*)\.mp3$$" to="\1[\2.mp3"
			nomatchcopy="false"/>
	</target>
	
	<target name="prepare-jpVocxx">
		<copy todir="${user.home}/temp/rename/D1/a1">
			<fileset dir="${user.home}/temp/rename/C1/a1"></fileset>
		</copy>
		<!-- TODO -->
		<batch-rename dir="${user.home}/temp/rename/C1/b1" 
			todir="${user.home}/temp/rename/D1/b1" 
			from="^([^\[]*)\[(.*)\.mp3$$" to="\1[\2.mp3"
			nomatchcopy="false"/>
	</target>
	
	<target name="prepare-jpVoc">
		<pathconvert property="mp3paths" pathsep="::">
			<fileset dir="${VMSHARE.DIR}/win7/jpwords" includes="unit*/**/*.mp3"/>
			<regexpmapper from="^(.*)/([^/]*)\.mp3$$" to="\2" casesensitive="yes"/>
		</pathconvert>
		<echo message="${mp3paths}"/>
		
		<concat destfile="bin/voca.filenames">
		${mp3paths}
			<filterchain>
				<tokenfilter delimOutput="\n">
					<stringtokenizer delims="::"/>
					<uniqfilter/>
				</tokenfilter>
				<sortfilter/>
			</filterchain>
		</concat>
		<native2ascii dest="bin" ext=".unicodes" src="bin/" 
			includes="voca.filenames">
		</native2ascii>
		
		<!--
		<loadfile property="mp3names" srcfile="bin/voca.filenames"></loadfile>
		<echo message="${mp3names}"/>
		<cmd line="cat ${basedir}/bin/voca.unicodes"/>
		-->
	</target>
	
	<target name="build-javaParser">
		<delete dir="${javac.out.dir}" includes="**"></delete>
		<mkdir dir="${javac.out.dir}"/>
		<javac destdir="${javac.out.dir}"
			listfiles="Yes" deprecation="Yes">
			<classpath>
				<path refid="atlr3.classpath"></path>
    			<pathelement location="libs/gson-2.1.jar"/>
			</classpath>
			<compilerarg value="-Xlint:unchecked"/>
			<src path="antlr/gen/java"></src>
			<src path="antlr/src"></src>
			<src path="src"></src>
		</javac>
	</target>
	
	<target name="run-javaParser" depends="build-javaParser">
		<!--
		<java classname="org.sharpx.parser.antlr.JpVocabulary" 
			input="bin/voca.filenames" output="bin/parser-output.txt">
			<arg value="voclist"/>
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		<cmd line="cat ${basedir}/bin/parser-output.txt"/>
		-->
		<java classname="org.sharp.parser.antlr.JpVocabulary" 
			input="bin/voca.filenames" output="bin/vocabularylist.html">
			<arg value="voclist"/>
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		<!--
		<java classname="org.sharpx.parser.antlr.JpVocabulary" 
			inputstring="ペキンだいがく（北京大学） 〔专〕 北京大学">
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		<java classname="org.sharpx.parser.antlr.JpVocabulary" 
			inputstring="あんまり　（副） 太，非常，过于">
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		<java classname="org.sharpx.parser.antlr.JpVocabulary" 
			inputstring="あキューせいでん（阿Q正伝［专］）阿Q正传">
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		<java classname="org.sharpx.parser.antlr.JpVocabulary" 
			inputstring="ばんりのちょうじょう（万里の長城 〔专〕 万里长城">
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		<java classname="org.sharpx.parser.antlr.JpVocabulary" 
			inputstring="查（看），弄清">
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		<java classname="org.sharpx.parser.antlr.JpVocabulary" 
			inputstring="～">
			<classpath>
				<path refid="atlr3.classpath"/>
				<pathelement location="bin/ant/classes"/>
			</classpath>
		</java>
		-->
	</target>
	
	<target name="swig">
		<swig modulefile="jni/src/swig/jpVoc.i"
			joutdir="jni/swig/java"
			coutfile="jni/swig/c/jpvoc_wrap.cpp"
			jpackage="org.sharpx"/>
		<make dir="build/make" 
			makefile="jpVocParser.mk" 
			target="swiglib"/>
	</target>
	
</project>