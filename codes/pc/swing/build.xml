<?xml version="1.0" encoding="UTF-8"?>
<project name="console" default="release" basedir="." xmlns:artifact="urn:maven-artifact-ant">
	<description>console project</description>

	<import file="lib/ant/ant-contrib.xml"/>
	<import file="lib/ant/one-jar-ant-task.xml"/>

	<property name="p.pom.file" location="pom.xml"/>
	<import file="lib/ant/build-initMaven.xml"/>
	
	<property name="projname" value="console" />

	<property file="build.properties" />
	<property name="mvn.repository" location="${user.home}/.m2/repository" />

	<property name="src.dir" location="src" />
	<property name="jwordplay.src" location="3rd/jwordplay/src" />
	<property name="googlecodeupload.src" location="3rd/ant-googlecode/src" />
	<property name="testsrc" location="test/src" />

	<property name="build.dir" location="build/ant"/>
	<property name="build.classes" value="${build.dir}/classes" />
	<property name="build.test" value="${build.dir}/test" />
	<property name="build.testout" value="${build.dir}/testout" />

	<property name="m.jar.beans" value="my-beans.jar" />
	<property name="m.jar.scala" value="my-scala.jar" />
	<property name="m.jar.swing-utils" value="swing-utils.jar" />	
	<property name="m.jar.legacy-utils" value="legacy-utils.jar" />	
	<property name="m.jar.utils" value="utils.jar" />	
	<property name="m.jar.dirsnap" value="dirsnap.jar" />
	<property name="m.jar.elearn" value="elearn.jar" />	
	<property name="m.jar.pluggable" value="pluggable.jar" />
	<property name="m.jar.3rd" value="3rd.jar"/>	
	<propertyset id="m.properties">
		<propertyref name="src.dir"/>
		<propertyref name="build.classes"/>
	</propertyset>
	
	<property name="a.run.dir.elearn" location="run/my2"/>
	
	<property name="mainclass" value="org.sharp.swing.Console"/>
	<fileset id="artifact.jars" dir="${build.dir}" 
		includes="${m.jar.scala},${m.jar.beans},
		y-out.jar,${m.jar.3rd}"/>

    <fileset id="3rd.jars" dir="${3rd.jars}" includes="**/*.jar"/>
    <path id="3rd.classpath">
		<fileset refid="3rd.jars"></fileset>
    </path>
	<path id="build.classpath">
		<path refid="maven.classpath" />
		<fileset refid="3rd.jars"></fileset>
	</path>
	<path id="test.classpath">
		<path location="${build.classes}/main"/>
		<path refid="build.classpath"/>
		<path location="${build.test}"/>
	</path>
	
	<patternset id="scala.indep">
		<include name="**/utils/*.java"/>
		<include name="**/beans/*.java"/>
		<include name="**/intf/*.java"/>
	</patternset>
	<uptodate targetfile="${a.run.dir.elearn}/my2.jar" property="run-jar-uptodate">
		<srcfiles dir="${src.dir}" includes="**/*" excludes="**/runtime.properties"></srcfiles>
	</uptodate>
	
	<target name="prop">
		<echoxml>
			<hah></hah>
		</echoxml>
		<property name="modules.filename" value="modules.all.properties"/>
		<property name="modules.filename" value="modules.oxfordA7.properties"/>
		<propertyfile
		    file="lib/res/runtime.properties"
		    comment="runtime properties">
			<entry  key="buildnum" type="int" default="0" operation="+"/>
			<entry  key="buildtime" type="date" value="now" pattern="MM-dd HH:mm"/>
		</propertyfile>
		<copy tofile="${src.dir}/org/sharp/utils/beans/runtime.properties"
			file="lib/res/runtime.properties" overwrite="true"/>
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
		<!-- <delete dir="lib/jars" /> -->
		<!-- <antcall target="compile"/> -->
	</target>

	<target name="compile" depends="prop,initMaven">
		<mkdir dir="lib/jars/mvn" />
		<copy todir="lib/jars/mvn" flatten="true">
			<fileset refid="maven.fileset"></fileset>
		</copy>
		<mkdir dir="lib/jars/3rd" />
		<copy todir="lib/jars/3rd" flatten="true">
			<fileset refid="3rd.jars"></fileset>
		</copy>
		<copy tofile="${src.dir}/org/sharp/utils/beans/modules.properties"
			file="lib/res/${modules.filename}" overwrite="true"/>
		
		<ant target="jar" antfile="lib/modules/beans/build-beans.xml" inheritAll="false">
			<propertyset refid="m.properties"/>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.beans}"/>
		</ant>
		<ant target="jar" antfile="lib/modules/3rd/build-3rd.xml"
			inheritAll="false">
			<propertyset refid="m.properties"/>
			<propertyset>
				<propertyref name="googlecodeupload.src"/>
				<propertyref name="jwordplay.src"/>
			</propertyset>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.3rd}"/>
		</ant>
		<ant target="jar" antfile="lib/modules/swing-utils/build-swing-utils.xml" inheritAll="false">
			<propertyset refid="m.properties"/>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.swing-utils}"/>
		</ant>
		<ant target="jar" antfile="lib/modules/pluggable/build-pluggable.xml" inheritAll="false">
			<propertyset refid="m.properties"/>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.pluggable}"/>
		</ant>
		<ant target="jar" antfile="lib/modules/utils/build-utils.xml" inheritAll="false">
			<propertyset refid="m.properties"/>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.utils}"/>
		</ant>

		<ant target="jar" antfile="lib/modules/legacy-utils/build-legacy-utils.xml" inheritAll="false">
			<propertyset refid="m.properties"/>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.legacy-utils}"/>
		</ant>
		<ant target="jar" antfile="lib/modules/scala/build-scala.xml"
			inheritAll="false">
			<property name="c.build.classes" value="${build.dir}/scala"/>
			<property name="c.m.pom.file" location="lib/modules/scala/pom.xml"/>
			<property name="c.scala.src" location="scala/src" />
			<property name="c.m.jar.loc" value="${build.dir}/${m.jar.scala}"/>
            <reference refid="3rd.classpath" torefid="c.3rd.classpath"/>
		</ant>
		
		<path id="other.classpath">
			<path refid="build.classpath" />
			<pathelement location="${build.dir}/${m.jar.scala}"/>
			<pathelement location="${build.dir}/${m.jar.3rd}"/>
		</path>

		<ant target="jar" antfile="lib/modules/f-dirsnap/build-f-dirsnap.xml" inheritAll="false">
			<propertyset refid="m.properties"/>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.dirsnap}"/>
		</ant>
		<ant target="jar" antfile="lib/modules/elearn/build-elearn.xml" inheritAll="false">
			<propertyset refid="m.properties"/>
			<property name="m.jar.loc" value="${build.dir}/${m.jar.elearn}"/>
		</ant>

		<mkdir dir="${build.classes}/main"/>
		<javac destdir="${build.classes}/main" classpathref="other.classpath" 
			debug="true" encoding="utf-8"> 
			<src path="${src.dir}" />
		</javac>
		<mkdir dir="${build.test}" />
		<javac destdir="${build.test}" classpathref="test.classpath" 
			debug="true" encoding="utf-8">
			<src path="${testsrc}" />
		</javac>
	</target>

	<target name="run">
		<if>
			<not><isset property="run-jar-uptodate"/></not>
			<then>
				<antcall target="create_run_jar"/>
			</then>
			<else>
				<echo message="${a.run.dir.elearn}/my2.jar update"/>
			</else>
		</if>
		<java jar="${a.run.dir.elearn}/my2.jar" dir="${a.run.dir.elearn}" fork="true">
		</java>
	</target>
	
	<target name="debug" depends="create_run_jar">
		<java jar="${a.run.dir.elearn}/my2.jar" dir="${a.run.dir.elearn}" fork="true">
			<jvmarg value="-agentlib:jdwp=transport=dt_socket,address=1044,server=y,suspend=y"/>
		</java>
	</target>
	
	<target name="obscure">
    	<property name="yguard.in.jar" value="${build.dir}/y-in.jar"/>
    	<property name="yguard.out.jar" value="${build.dir}/y-out.jar"/>
    	<jar destfile="${yguard.in.jar}" basedir="${build.classes}/main"
    		excludes="**/scala/**,**/s4j/**,**/beans/**,**/res/**,**/intf/**"/>
		<path id="artifact.jars.path">
			<pathelement location="${build.dir}/${m.jar.beans}"/>
			<pathelement location="${build.dir}/${m.jar.scala}"/>
		</path>
		<ant target="yguard" antfile="lib/ant/yguard-ant-task.xml"
			inheritAll="false">
			<reference refid="artifact.jars.path"/>
			<property name="yguard.rename.keep.implements" 
				value="org.sharp.intf.Pluggable"/>
			<propertyset>
				<propertyref name="mainclass"/>
				<propertyref prefix="yguard"/>
			</propertyset>
		</ant>
	</target>
	
	<target name="create_run_jar" depends="compile">
		<antcall target="obscure"/>
		<ant target="onejar" antfile="lib/ant/one-jar-ant-task.xml" inheritAll="false">
			<property name="cr.build.classes.dir" value="${build.classes}/main"/>
			<property name="cr.src.dir" value="${src.dir}"/>
			<property name="cr.out.jar.file" value="${a.run.dir.elearn}/my2.jar"/>
			<property name="cr.mainclass" value="${mainclass}"/>
			<reference refid="artifact.jars" torefid="cr.artifact.jars"/>
			<reference refid="maven.fileset" torefid="cr.maven.fileset"/>
			<reference refid="3rd.jars" torefid="cr.3rd.jars"/>
		</ant>
    </target>
	
	<target name="release">
		<available file="${a.run.dir.elearn}/my2.jar" property="runjar.present"/>
		<if>
			<not><isset property="run-jar-uptodate"/></not>
			<then>
				<antcall target="create_run_jar"/>
			</then>
			<else>
				<echo message="${a.run.dir.elearn}/my2.jar update"/>
			</else>
		</if>
		<tstamp/>
		<move todir="${a.release.dir.elearn}" includeemptydirs="false">
			<fileset dir="${a.release.dir.elearn}" includes="my2.jar,my2.bat"/>
			<mapper type="glob" from="*" to="*.${DSTAMP}.bak"/>
		</move>
		<copy todir="${a.release.dir.elearn}">
    		<fileset dir="${a.run.dir.elearn}" includes="my2.jar,my2.bat"/>
    	</copy>
	</target>
	
	<target name="import-data">
		<copy todir="${a.run.dir.elearn}">
    		<fileset dir="${a.release.dir.elearn}" includes="**/*" 
    		excludes="my2.bat,my2.jar,config.xml,DocReaderApp.xml,userinfo.txt"/>
    	</copy>
	</target>
	
	<target name="gen_deliverable">
		<ant target="deploy" antfile="lib/modules/beans/build-beans.xml"
			inheritAll="false">
			<property name="out.jar" value="build/my-beans.jar"/>
			<propertyset>
				<propertyref name="build.classes"/>
				<propertyref name="maven_repo.dir"/>
			</propertyset>
		</ant>
		<ant target="launch4j" antfile="lib/ant/launch4j-ant-task.xml"
			inheritAll="false">
			<property name="launch4j.out.file" location="${a.run.dir.elearn}/languageHelper.exe"/>
			<property name="launch4j.jar.path" location="${a.run.dir.elearn}/my2.jar"/>
		    <property name="launch4j.dir" value="${launch4j.dir}"/>
    		<property name="launch4j.config.file" location="lib/res/languageHelperX.xml"/>
		</ant>
		<zip destfile="${a.run.dir.elearn}/languageHelper.zip">
			<fileset dir="${a.run.dir.elearn}"
				includes="languageHelper.exe,jre7/**">
			</fileset>
		</zip>
	</target>
	
	<target name="junit" description="unit test using junit">
		<!--
		<sleep seconds="30"/>
		-->
		<input message="deploy complete,yes/no?"/>
		<junit>
			<classpath refid="test.classpath"/>
			<formatter type="plain" usefile="false"/>
			<batchtest fork="yes">
				<fileset dir="${testsrc}">
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="jni"><!-- depends="compile" -->
		<mkdir dir="build/c"/>
		<javah destdir="build/c" class="org.sharp.console.jni.Win32" 
			classpath="${build.classes}/main" verbose="yes"/>
		<exec executable="cmd.exe">
			<arg line="/c jni.bat"/>
		</exec>
	</target>

	<target name="jni-run">
		<java classname="org.sharp.console.jni.Win32" 
			classpath="${build.classes}/main"
			dir="${basedir}">
		</java>
	</target>
</project>
