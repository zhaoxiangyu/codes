<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.3.0.1, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Sun Sep 11 10:33:21 CST 2011

  Jar file to be obfuscated:           y-in.jar
  Target Jar file for obfuscated code: y-out.jar

-->
<!-- WARNING
Methods are called which may break in obfuscated version at runtime.
Please review your source code to ensure that the dangerous methods are not intended
to act on classes which have been obfuscated.
-->
<!--
     Your class edu.ncsu.csc517.dpp11.gui.PuzzleScreen calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!--
     Your class edu.ncsu.csc517.dpp11.gui.WordListScreen calls the java.lang.Class method java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[])
-->
<!-- WARNING: Unresolved external dependency: junit.framework.TestCase not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestCase not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestCase not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.DirectoryWalker not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.DirectoryWalker not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.DirectoryWalker not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerListener not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerListener not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Interceptor not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Interceptor not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Interceptor not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window$DeleteEvent not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window$DeleteEvent not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button$Clicked not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button$Clicked not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Transformer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Transformer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: net.sf.cglib.core.Transformer not found! -->
<!-- WARNING: Unresolved external dependency: net.sf.cglib.core.Transformer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!--
  Memory in use after class data structure built: 39142376 bytes
  Total memory available                        : 156966912 bytes
-->
<!-- WARNING: Unresolved external dependency: junit.framework.Test not found! -->
<!-- WARNING: No mapping found: junit.framework.TestCase -->
<!-- WARNING: No mapping found: junit.framework.TestSuite -->
<!-- WARNING: Unresolved external dependency: junit.framework.Test not found! -->
<!-- WARNING: No mapping found: junit.textui.TestRunner -->
<!-- WARNING: Unresolved external dependency: junit.framework.Test not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestResult not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestSuite not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestCase not found! -->
<!-- WARNING: Unresolved external dependency: junit.textui.TestRunner not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.Test not found! -->
<!-- WARNING: No mapping found: junit.framework.TestCase -->
<!-- WARNING: No mapping found: junit.framework.TestSuite -->
<!-- WARNING: Unresolved external dependency: junit.framework.Test not found! -->
<!-- WARNING: No mapping found: junit.textui.TestRunner -->
<!-- WARNING: Unresolved external dependency: junit.framework.Test not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestResult not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestSuite not found! -->
<!-- WARNING: Unresolved external dependency: junit.framework.TestCase not found! -->
<!-- WARNING: Unresolved external dependency: junit.textui.TestRunner not found! -->
<!-- WARNING: Unresolved external dependency: com.sun.j3d.utils.universe.SimpleUniverse not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.j3d.BranchGroup not found! -->
<!-- WARNING: No mapping found: com.sun.j3d.utils.universe.SimpleUniverse -->
<!-- WARNING: No mapping found: javax.media.j3d.BranchGroup -->
<!-- WARNING: No mapping found: com.sun.j3d.utils.geometry.ColorCube -->
<!-- WARNING: No mapping found: javax.media.j3d.BranchGroup -->
<!-- WARNING: Unresolved external dependency: javax.media.j3d.Node not found! -->
<!-- WARNING: No mapping found: com.sun.j3d.utils.universe.SimpleUniverse -->
<!-- WARNING: Unresolved external dependency: com.sun.j3d.utils.universe.ViewingPlatform not found! -->
<!-- WARNING: No mapping found: com.sun.j3d.utils.universe.ViewingPlatform -->
<!-- WARNING: No mapping found: com.sun.j3d.utils.universe.SimpleUniverse -->
<!-- WARNING: Unresolved external dependency: javax.media.j3d.BranchGroup not found! -->
<!-- WARNING: Unresolved external dependency: com.sun.j3d.utils.universe.SimpleUniverse not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.j3d.BranchGroup not found! -->
<!-- WARNING: Unresolved external dependency: com.sun.j3d.utils.geometry.ColorCube not found! -->
<!-- WARNING: Unresolved external dependency: com.sun.j3d.utils.universe.ViewingPlatform not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button$Clicked not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Button -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button$Clicked not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window$DeleteEvent not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Widget not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gdk.Event not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Widget not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gdk.Event not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Gtk -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window$DeleteEvent not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Gtk not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button$Clicked not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window$DeleteEvent not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.VBox not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Label not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Gtk -->
<!-- WARNING: No mapping found: org.gnome.gtk.Window -->
<!-- WARNING: No mapping found: org.gnome.gtk.VBox -->
<!-- WARNING: No mapping found: org.gnome.gtk.Label -->
<!-- WARNING: No mapping found: org.gnome.gtk.VBox -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Widget not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Button -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Button -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button$Clicked not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Window -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Widget not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Window -->
<!-- WARNING: No mapping found: org.gnome.gtk.Window -->
<!-- WARNING: No mapping found: org.gnome.gtk.Window -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window$DeleteEvent not found! -->
<!-- WARNING: No mapping found: org.gnome.gtk.Gtk -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.VBox not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Label not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Gtk not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Button$Clicked not found! -->
<!-- WARNING: Unresolved external dependency: org.gnome.gtk.Window$DeleteEvent not found! -->
<!-- WARNING: Unresolved external dependency: org.hibernate.SessionFactory not found! -->
<!-- WARNING: Unresolved external dependency: org.hibernate.Session not found! -->
<!-- WARNING: Unresolved external dependency: org.hibernate.SessionFactory not found! -->
<!-- WARNING: No mapping found: org.hibernate.SessionFactory -->
<!-- WARNING: Unresolved external dependency: org.hibernate.classic.Session not found! -->
<!-- WARNING: No mapping found: org.hibernate.cfg.AnnotationConfiguration -->
<!-- WARNING: No mapping found: org.hibernate.cfg.AnnotationConfiguration -->
<!-- WARNING: Unresolved external dependency: org.hibernate.cfg.AnnotationConfiguration not found! -->
<!-- WARNING: No mapping found: org.hibernate.cfg.AnnotationConfiguration -->
<!-- WARNING: Unresolved external dependency: org.hibernate.cfg.AnnotationConfiguration not found! -->
<!-- WARNING: No mapping found: org.hibernate.cfg.AnnotationConfiguration -->
<!-- WARNING: Unresolved external dependency: org.hibernate.SessionFactory not found! -->
<!-- WARNING: Unresolved external dependency: org.hibernate.cfg.AnnotationConfiguration not found! -->
<!-- WARNING: Unresolved external dependency: org.hibernate.SessionFactory not found! -->
<!-- WARNING: Unresolved external dependency: com.orientechnologies.orient.core.db.object.ODatabaseObject not found! -->
<!-- WARNING: Unresolved external dependency: com.orientechnologies.orient.core.db.object.ODatabaseObject not found! -->
<!-- WARNING: Unresolved external dependency: com.orientechnologies.orient.core.db.object.ODatabaseObject not found! -->
<!-- WARNING: No mapping found: com.orientechnologies.orient.core.db.object.ODatabaseObjectTx -->
<!-- WARNING: No mapping found: com.orientechnologies.orient.core.db.object.ODatabaseObjectTx -->
<!-- WARNING: Unresolved external dependency: com.orientechnologies.orient.core.db.ODatabase not found! -->
<!-- WARNING: Unresolved external dependency: com.orientechnologies.orient.core.db.object.ODatabaseObjectTx not found! -->
<!-- WARNING: Unresolved external dependency: com.orientechnologies.orient.core.db.object.ODatabaseObject not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: No mapping found: fj.F -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: No mapping found: fj.F -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: Unresolved external dependency: javazoom.jl.decoder.JavaLayerException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.beanutils.PropertyUtils -->
<!-- WARNING: No mapping found: org.apache.commons.beanutils.PropertyUtils -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.beanutils.PropertyUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.swing.mxGraphComponent not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FileUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.math.RandomUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.math.RandomUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.NumericField not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: No mapping found: org.apache.lucene.document.NumericField -->
<!-- WARNING: No mapping found: org.apache.lucene.document.NumericField -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.NumericField not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Field -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.NumericField not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.sharp.utils.s4j.ScalaUtils -->
<!-- WARNING: No mapping found: org.sharp.utils.s4j.ScalaUtils -->
<!-- WARNING: Unresolved external dependency: org.sharp.utils.s4j.ScalaUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.TextExtractor not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.TextExtractor -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Segment -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.TextExtractor not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.CollectionUtils not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.IOUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.IOUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FileUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.StringUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Fieldable -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Fieldable -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.tuple.Pair -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.tuple.Pair -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Fieldable -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Fieldable -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.ScoreDoc not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.ArrayUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.ArrayUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: net.miginfocom.swing.MigLayout -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.StringUtils -->
<!-- WARNING: Unresolved external dependency: net.miginfocom.swing.MigLayout not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: net.sf.cglib.core.Transformer not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: net.sf.cglib.core.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: net.sf.cglib.core.Transformer not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.ArrayUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: net.sf.cglib.core.CollectionUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.ArrayUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.ObjectUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.ObjectUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.math.NumberUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.math.NumberUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Transformer not found! -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.CollectionUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.ArrayUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.ArrayUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.ArrayUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.ArrayUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.ArrayUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.ArrayUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Transformer not found! -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.CollectionUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FileUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.ArrayUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.ArrayUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.CollectionUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Predicate not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.CollectionUtils not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: No mapping found: fj.F -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: No mapping found: fj.F -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: No mapping found: fj.data.Array -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: No mapping found: fj.data.Array -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: No mapping found: fj.data.Array -->
<!-- WARNING: No mapping found: fj.data.Array -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Option not found! -->
<!-- WARNING: No mapping found: fj.data.Option -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Option not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.mutable.MutableInt not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.mutable.MutableInt not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.mutable.MutableInt not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.mutable.MutableInt not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.lang.mutable.MutableInt -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.mutable.MutableInt not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.Player not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.NoPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.CannotRealizeException not found! -->
<!-- WARNING: No mapping found: javax.media.Manager -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: javax.media.Manager -->
<!-- WARNING: Unresolved external dependency: javax.media.Player not found! -->
<!-- WARNING: No mapping found: javax.media.Player -->
<!-- WARNING: No mapping found: javax.media.Player -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: javax.media.NoPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.CannotRealizeException not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.Player not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.NoPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.CannotRealizeException not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.Manager not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: javax.media.Player not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.jxpath.JXPathContext not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.lang.ObjectUtils -->
<!-- WARNING: No mapping found: org.apache.commons.collections.CollectionUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.Closure not found! -->
<!-- WARNING: No mapping found: org.apache.commons.jxpath.JXPathContext -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.jxpath.JXPathContext not found! -->
<!-- WARNING: No mapping found: org.apache.commons.jxpath.JXPathContext -->
<!-- WARNING: No mapping found: org.apache.commons.collections.IteratorUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FileUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.ObjectUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.CollectionUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.jxpath.JXPathContext not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.IteratorUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang.math.RandomUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.math.RandomUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Segment -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Segment -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.ObjectUtils -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Segment -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Element -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.ArrayUtils -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Element not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.ObjectUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.ArrayUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.ObjectUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.ObjectUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FileUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.math.RandomUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.math.RandomUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.math.RandomUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.math.RandomUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FileUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.jinterop.dcom.common.JIException not found! -->
<!-- WARNING: No mapping found: org.apache.commons.beanutils.PropertyUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.beanutils.PropertyUtils -->
<!-- WARNING: No mapping found: org.apache.commons.beanutils.PropertyUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.beanutils.PropertyUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.beanutils.PropertyUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.beanutils.PropertyUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.sharp.swing.apps.beans.TextAreaAppender not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Appender not found! -->
<!-- WARNING: No mapping found: org.sharp.swing.apps.beans.TextAreaAppender -->
<!-- WARNING: Unresolved external dependency: org.sharp.swing.apps.beans.TextAreaAppender not found! -->
<!-- WARNING: Unresolved external dependency: org.sharp.swing.apps.beans.TextAreaAppender not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.BooleanUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.BooleanUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Element not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Element not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.io.SAXReader not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Element not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.CharUtils -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.dom4j.Element -->
<!-- WARNING: No mapping found: org.dom4j.Element -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Element not found! -->
<!-- WARNING: No mapping found: org.dom4j.io.SAXReader -->
<!-- WARNING: No mapping found: org.dom4j.io.SAXReader -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Document not found! -->
<!-- WARNING: No mapping found: org.dom4j.Document -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Element not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Element not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.io.SAXReader not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.CharUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.dom4j.Document not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.DirectoryWalker -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.DirectoryWalker not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.DirectoryWalker -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.DirectoryWalker not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.StringUtils not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.codehaus.jackson.map.ObjectMapper not found! -->
<!-- WARNING: Unresolved external dependency: org.codehaus.jackson.map.ObjectMapper not found! -->
<!-- WARNING: No mapping found: org.codehaus.jackson.map.ObjectMapper -->
<!-- WARNING: No mapping found: org.codehaus.jackson.map.ObjectMapper -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.codehaus.jackson.map.ObjectMapper -->
<!-- WARNING: No mapping found: org.exolab.castor.xml.Marshaller -->
<!-- WARNING: No mapping found: org.exolab.castor.xml.Unmarshaller -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.filefilter.WildcardFileFilter -->
<!-- WARNING: No mapping found: org.apache.commons.io.filefilter.FileFilterUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.filefilter.FileFilterUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.IOFileFilter not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.FileUtils -->
<!-- WARNING: Unresolved external dependency: org.codehaus.jackson.map.ObjectMapper not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.WildcardFileFilter not found! -->
<!-- WARNING: Unresolved external dependency: org.codehaus.jackson.map.ObjectMapper not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.exolab.castor.xml.Marshaller not found! -->
<!-- WARNING: Unresolved external dependency: org.exolab.castor.xml.Unmarshaller not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.filefilter.FileFilterUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FileUtils not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Renderer not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Source -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Segment -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Renderer -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Renderer -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Renderer not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Renderer -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Renderer not found! -->
<!-- WARNING: No mapping found: net.htmlparser.jericho.Renderer -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Source not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Renderer not found! -->
<!-- WARNING: Unresolved external dependency: net.htmlparser.jericho.Segment not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.HttpClient not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpGet not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpResponse not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpEntity not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpGet not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpPost not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpResponse not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpEntity not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.HttpClient not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.IterableMap not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.MapIterator not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.entity.UrlEncodedFormEntity not found! -->
<!-- WARNING: No mapping found: org.apache.http.impl.client.DefaultHttpClient -->
<!-- WARNING: No mapping found: org.apache.http.client.methods.HttpGet -->
<!-- WARNING: No mapping found: org.apache.http.client.HttpClient -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpUriRequest not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpResponse not found! -->
<!-- WARNING: No mapping found: org.apache.http.HttpResponse -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpEntity not found! -->
<!-- WARNING: No mapping found: org.apache.http.HttpEntity -->
<!-- WARNING: No mapping found: org.apache.http.util.EntityUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpEntity not found! -->
<!-- WARNING: No mapping found: org.apache.commons.collections.map.HashedMap -->
<!-- WARNING: No mapping found: org.apache.commons.collections.IterableMap -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.MapIterator not found! -->
<!-- WARNING: No mapping found: org.apache.commons.collections.MapIterator -->
<!-- WARNING: No mapping found: org.apache.commons.collections.MapIterator -->
<!-- WARNING: No mapping found: org.apache.commons.collections.MapIterator -->
<!-- WARNING: No mapping found: org.apache.http.message.BasicNameValuePair -->
<!-- WARNING: No mapping found: org.apache.http.client.entity.UrlEncodedFormEntity -->
<!-- WARNING: No mapping found: org.apache.http.client.methods.HttpPost -->
<!-- WARNING: No mapping found: org.apache.http.client.methods.HttpPost -->
<!-- WARNING: No mapping found: org.apache.http.client.methods.HttpPost -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpEntity not found! -->
<!-- WARNING: No mapping found: org.apache.http.HttpResponse -->
<!-- WARNING: Unresolved external dependency: org.apache.http.StatusLine not found! -->
<!-- WARNING: No mapping found: org.apache.http.StatusLine -->
<!-- WARNING: No mapping found: org.apache.http.HttpResponse -->
<!-- WARNING: Unresolved external dependency: org.apache.http.Header not found! -->
<!-- WARNING: No mapping found: org.apache.http.Header -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.http.client.methods.HttpPost -->
<!-- WARNING: Unresolved external dependency: org.apache.http.impl.client.DefaultHttpClient not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpGet not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.map.HashedMap not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.message.BasicNameValuePair not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.entity.UrlEncodedFormEntity not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpPost not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.HttpClient not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpGet not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpResponse not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpEntity not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.ClientProtocolException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.IterableMap not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.MapIterator not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.entity.UrlEncodedFormEntity not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.methods.HttpPost not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.client.HttpClient not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpResponse not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.HttpEntity not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.util.EntityUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.IterableMap not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.collections.MapIterator not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.StatusLine not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.http.Header not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.view.mxGraph not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.swing.mxGraphComponent not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.swing.mxGraphComponent not found! -->
<!-- WARNING: No mapping found: com.mxgraph.view.mxGraph -->
<!-- WARNING: No mapping found: com.mxgraph.view.mxGraph -->
<!-- WARNING: No mapping found: com.mxgraph.view.mxGraph -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.model.mxIGraphModel not found! -->
<!-- WARNING: No mapping found: com.mxgraph.model.mxIGraphModel -->
<!-- WARNING: No mapping found: com.mxgraph.view.mxGraph -->
<!-- WARNING: No mapping found: com.mxgraph.view.mxGraph -->
<!-- WARNING: No mapping found: com.mxgraph.model.mxIGraphModel -->
<!-- WARNING: No mapping found: com.mxgraph.swing.mxGraphComponent -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.view.mxGraph not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.view.mxGraph not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.swing.mxGraphComponent not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.view.mxGraph not found! -->
<!-- WARNING: Unresolved external dependency: com.mxgraph.model.mxIGraphModel not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.IOUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.IOUtils not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: No mapping found: fj.F -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.builder.CompareToBuilder -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.builder.CompareToBuilder -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.builder.CompareToBuilder not found! -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.builder.CompareToBuilder -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.builder.CompareToBuilder not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: fj.data.Array -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: No mapping found: fj.data.Array -->
<!-- WARNING: Unresolved external dependency: fj.F not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: No mapping found: fj.data.Array -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: No mapping found: org.apache.commons.lang.StringUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.StringUtils not found! -->
<!-- WARNING: Unresolved external dependency: fj.data.Array not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.CorruptIndexException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.IndexSearcher -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.CorruptIndexException -->
<!-- WARNING: No mapping found: org.apache.lucene.search.IndexSearcher -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.CorruptIndexException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.CorruptIndexException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.CorruptIndexException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.IndexSearcher -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.CorruptIndexException -->
<!-- WARNING: No mapping found: org.apache.lucene.search.IndexSearcher -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.CorruptIndexException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.CorruptIndexException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.NumericField not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: No mapping found: org.apache.lucene.document.NumericField -->
<!-- WARNING: No mapping found: org.apache.lucene.document.NumericField -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.NumericField not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.IOUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Field -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.NumericField not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.IOUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$TermVector not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.tokenattributes.OffsetAttribute not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.lucene.analysis.TokenStream -->
<!-- WARNING: No mapping found: org.apache.lucene.analysis.TokenStream -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.util.Attribute not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.analysis.tokenattributes.CharTermAttribute -->
<!-- WARNING: No mapping found: org.apache.lucene.analysis.tokenattributes.OffsetAttribute -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.tokenattributes.CharTermAttribute not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.tokenattributes.OffsetAttribute not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.tokenattributes.OffsetAttribute not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TermQuery not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Scorer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Highlighter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.highlight.SimpleHTMLFormatter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Formatter not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.Term -->
<!-- WARNING: No mapping found: org.apache.lucene.search.TermQuery -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.highlight.QueryScorer -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.highlight.Highlighter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Scorer not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.highlight.Highlighter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.analysis.Analyzer -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.highlight.Highlighter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.SimpleHTMLFormatter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TermQuery not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.QueryScorer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Highlighter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Fragmenter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Formatter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TermQuery not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Scorer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.highlight.Highlighter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.TokenStream not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig$OpenMode not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.BooleanClause$Occur not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.Directory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermPositions not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.Directory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexReader not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermEnum not found! -->
<!-- WARNING: Unresolved external dependency: org.tartarus.snowball.ext.EnglishStemmer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.queryParser.QueryParser not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.BooleanQuery not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.Pair not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.util.Version not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.analysis.snowball.SnowballAnalyzer -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.util.Version not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.store.FSDirectory -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.FSDirectory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriterConfig -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.util.Version not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig$OpenMode not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriterConfig -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig$OpenMode not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig$OpenMode not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.Directory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexReader -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.Directory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexReader not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexReader -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermEnum not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermEnum -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermEnum -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexReader -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermPositions not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermPositions -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermPositions -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexReader -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: No mapping found: org.apache.commons.io.FilenameUtils -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermPositions -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermPositions -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.Term -->
<!-- WARNING: No mapping found: org.apache.lucene.index.Term -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermPositions -->
<!-- WARNING: No mapping found: org.apache.lucene.index.TermPositions -->
<!-- WARNING: No mapping found: org.tartarus.snowball.ext.EnglishStemmer -->
<!-- WARNING: No mapping found: org.tartarus.snowball.ext.EnglishStemmer -->
<!-- WARNING: No mapping found: org.tartarus.snowball.ext.EnglishStemmer -->
<!-- WARNING: No mapping found: org.tartarus.snowball.ext.EnglishStemmer -->
<!-- WARNING: No mapping found: org.apache.commons.lang3.tuple.ImmutablePair -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriter -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Field -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Field -->
<!-- WARNING: No mapping found: org.apache.lucene.document.Document -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Fieldable not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriterConfig -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig$OpenMode not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.Term -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriter -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.index.IndexWriter -->
<!-- WARNING: No mapping found: org.apache.lucene.search.IndexSearcher -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.Directory not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.queryParser.QueryParser -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.util.Version not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.queryParser.QueryParser -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.BooleanQuery -->
<!-- WARNING: No mapping found: org.apache.lucene.search.TermQuery -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.BooleanClause$Occur not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.BooleanQuery -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.BooleanClause$Occur not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.IndexSearcher -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: No mapping found: org.apache.lucene.search.Query -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.snowball.SnowballAnalyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: Unresolved external dependency: org.tartarus.snowball.ext.EnglishStemmer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang3.tuple.ImmutablePair not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.IndexSearcher not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.queryParser.QueryParser not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.BooleanQuery not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TermQuery not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.Directory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.analysis.Analyzer not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.CorruptIndexException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.LockObtainFailedException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexReader not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermEnum not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.Term not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermPositions not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriter not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.queryParser.ParseException not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.util.Version not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.store.FSDirectory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexWriterConfig$OpenMode not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.IndexReader not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermEnum not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.index.TermPositions not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Document not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.FilenameUtils not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Store not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.document.Field$Index not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.BooleanClause$Occur not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.Query not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.TopDocs not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.lucene.search.BooleanClause not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayer not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerEvent not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicController not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicController not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerEvent not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicController not found! -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicPlayer -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicController not found! -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicPlayer -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerListener not found! -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicController -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicController -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicPlayerException -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicController -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicPlayerException -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicController -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicPlayerEvent -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicPlayerEvent -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicPlayerEvent -->
<!-- WARNING: No mapping found: javazoom.jlgui.basicplayer.BasicController -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayer not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerListener not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerException not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicController not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: javazoom.jlgui.basicplayer.BasicPlayerEvent not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.extractor.WordExtractor not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.CharacterRun not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Paragraph not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.HWPFDocument not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Range not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.CharacterRun not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Paragraph not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.HWPFDocument not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Range not found! -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.extractor.WordExtractor -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.extractor.WordExtractor -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.HWPFDocument -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.HWPFDocument -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Range not found! -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.Range -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.Range -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Paragraph not found! -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.Paragraph -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.Paragraph -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.CharacterRun not found! -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.CharacterRun -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.CharacterRun -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.CharacterRun -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.CharacterRun -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.CharacterRun -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.CharacterRun -->
<!-- WARNING: No mapping found: org.apache.poi.hwpf.usermodel.CharacterRun -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.lang.builder.ToStringBuilder -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.extractor.WordExtractor not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.HWPFDocument not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.HWPFDocument not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Range not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Paragraph not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.CharacterRun not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Range not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.Paragraph not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.poi.hwpf.usermodel.CharacterRun not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.builder.ToStringBuilder not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Invocation not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Invocation not found! -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.Invocation -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.Invocation -->
<!-- WARNING: No mapping found: org.apache.commons.lang.builder.ToStringBuilder -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.Invocation -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.Invocation -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Interceptor not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Invocation not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Invocation not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.lang.builder.ToStringBuilder not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Invocation not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Invocation not found! -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.Invocation -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.Invocation -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: No mapping found: org.apache.log4j.Logger -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.Invocation -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Interceptor not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Invocation not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.log4j.Logger not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.factory.cglib.CglibProxyFactory not found! -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.factory.cglib.CglibProxyFactory not found! -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.factory.cglib.CglibProxyFactory -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.Interceptor not found! -->
<!-- WARNING: No mapping found: org.apache.commons.proxy.factory.cglib.CglibProxyFactory -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.proxy.factory.cglib.CglibProxyFactory not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.Item not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.SelectRequest not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.AmazonSimpleDB not found! -->
<!-- WARNING: No mapping found: com.amazonaws.auth.BasicAWSCredentials -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.AmazonSimpleDBClient -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.auth.AWSCredentials not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.AmazonSimpleDB not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.CreateDomainRequest -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.AmazonSimpleDB -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.CreateDomainRequest not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.ReplaceableItem -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.ReplaceableItem -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.ReplaceableItem not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.ReplaceableAttribute -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.ReplaceableAttribute -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.ReplaceableAttribute not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.ReplaceableAttribute -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.ReplaceableAttribute not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.ReplaceableItem -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.ReplaceableAttribute not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.ReplaceableItem not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.BatchPutAttributesRequest -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.AmazonSimpleDB -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.BatchPutAttributesRequest not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.SelectRequest -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.AmazonSimpleDB -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.SelectRequest not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.SelectResult not found! -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.SelectResult -->
<!-- WARNING: No mapping found: com.amazonaws.services.simpledb.model.Item -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.AmazonSimpleDBClient not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.auth.BasicAWSCredentials not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.CreateDomainRequest not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.ReplaceableItem not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.ReplaceableAttribute not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.BatchPutAttributesRequest not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.SelectRequest not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.Item not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.SelectRequest not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.AmazonSimpleDB not found! -->
<!-- WARNING: Unresolved external dependency: com.amazonaws.services.simpledb.model.SelectResult not found! -->
<!-- WARNING: No mapping found: org.apache.commons.codec.binary.Hex -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.codec.binary.Hex not found! -->
<!-- WARNING: No mapping found: org.apache.commons.io.IOUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.IOUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.IOUtils -->
<!-- WARNING: No mapping found: org.apache.commons.io.IOUtils -->
<!-- WARNING: Unresolved external dependency: org.apache.commons.io.IOUtils not found! -->
<expose>
  <class name="org.sharp.intf.Pluggable"/>
  <class name="org.sharp.swing.ui.LogUi"/>
  <class name="org.sharp.swing.apps.txt2lrc.LrcUi"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp"/>
  <class name="org.sharp.swing.apps.dirSnaps.DirSnapsApp"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi"/>
  <class name="org.sharp.swing.apps.crossword.CrosswordUi"/>
  <class name="org.sharp.swing.apps.graph.Sample"/>
  <class name="org.sharp.swing.Console"/>
  <method class="org.sharp.swing.Console" name="void main(java.lang.String[])"/>
</expose>
<map>
  <package name="net" map="A"/>
  <package name="net.bluecow" map="A"/>
  <package name="net.bluecow.googlecode" map="A"/>
  <package name="net.bluecow.googlecode.ant" map="A"/>
  <class name="net.bluecow.googlecode.ant.GoogleCodeUploadTask" map="A"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="targetFileName" map="A"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="verbose" map="B"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="fileName" map="C"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="labels" map="D"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="summary" map="E"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="uploadUrl" map="F"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="userName" map="G"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="password" map="H"/>
  <field class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="projectName" map="I"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getLabels()" map="A"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setPassword(java.lang.String)" map="A"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setFileName(java.lang.String)" map="B"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setLabels(java.lang.String)" map="C"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setSummary(java.lang.String)" map="D"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getPassword()" map="B"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void execute()" map="execute"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getProjectName()" map="C"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getSummary()" map="D"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setUserName(java.lang.String)" map="E"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getFileName()" map="E"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="boolean isVerbose()" map="F"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getUploadUrl()" map="G"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setProjectName(java.lang.String)" map="F"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void sendLine(java.io.OutputStream, java.lang.String)" map="A"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void upload()" map="H"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getUserName()" map="I"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setUploadUrl(java.lang.String)" map="G"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String getTargetFileName()" map="J"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.lang.String createAuthToken(java.lang.String, java.lang.String)" map="A"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="java.net.URL createUploadURL()" map="K"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setVerbose(boolean)" map="A"/>
  <method class="net.bluecow.googlecode.ant.GoogleCodeUploadTask" name="void setTargetFileName(java.lang.String)" map="H"/>
  <class name="net.bluecow.googlecode.ant.Base64$OutputStream" map="_A"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="decodabet" map="A"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="bufferLength" map="B"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="lineLength" map="C"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="alphabet" map="D"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="buffer" map="E"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="position" map="F"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="suspendEncoding" map="G"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="encode" map="H"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="breakLines" map="I"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="b4" map="J"/>
  <field class="net.bluecow.googlecode.ant.Base64$OutputStream" name="options" map="K"/>
  <method class="net.bluecow.googlecode.ant.Base64$OutputStream" name="void flush()" map="flush"/>
  <method class="net.bluecow.googlecode.ant.Base64$OutputStream" name="void suspendEncoding()" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64$OutputStream" name="void flushBase64()" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64$OutputStream" name="void write(byte[], int, int)" map="write"/>
  <method class="net.bluecow.googlecode.ant.Base64$OutputStream" name="void resumeEncoding()" map="C"/>
  <method class="net.bluecow.googlecode.ant.Base64$OutputStream" name="void write(int)" map="write"/>
  <method class="net.bluecow.googlecode.ant.Base64$OutputStream" name="void close()" map="close"/>
  <class name="net.bluecow.googlecode.ant.Base64$InputStream" map="_B"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="decodabet" map="A"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="bufferLength" map="B"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="lineLength" map="C"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="alphabet" map="D"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="buffer" map="E"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="position" map="F"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="encode" map="G"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="breakLines" map="H"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="numSigBytes" map="I"/>
  <field class="net.bluecow.googlecode.ant.Base64$InputStream" name="options" map="J"/>
  <method class="net.bluecow.googlecode.ant.Base64$InputStream" name="int read()" map="read"/>
  <method class="net.bluecow.googlecode.ant.Base64$InputStream" name="int read(byte[], int, int)" map="read"/>
  <class name="net.bluecow.googlecode.ant.Base64" map="B"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="_ORDERED_ALPHABET" map="A"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="NO_OPTIONS" map="B"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="EQUALS_SIGN" map="C"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="URL_SAFE" map="D"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="ENCODE" map="E"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="_URL_SAFE_DECODABET" map="F"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="_URL_SAFE_ALPHABET" map="G"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="MAX_LINE_LENGTH" map="H"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="NEW_LINE" map="I"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="ORDERED" map="J"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="EQUALS_SIGN_ENC" map="K"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="GZIP" map="L"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="DECODE" map="M"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="DO_BREAK_LINES" map="N"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="_STANDARD_DECODABET" map="O"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="_STANDARD_ALPHABET" map="P"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="PREFERRED_ENCODING" map="Q"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="$assertionsDisabled" map="R"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="_ORDERED_DECODABET" map="S"/>
  <field class="net.bluecow.googlecode.ant.Base64" name="WHITE_SPACE_ENC" map="T"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="void decodeToFile(java.lang.String, java.lang.String)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.Object decodeToObject(java.lang.String)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] decode(byte[], int, int, int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] encode3to4(byte[], int, int, byte[], int, int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="void encode(java.nio.ByteBuffer, java.nio.CharBuffer)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.String encodeBytes(byte[])" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] encodeBytesToBytes(byte[])" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="int access$300(byte[], int, byte[], int, int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.String encodeBytes(byte[], int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="int decode4to3(byte[], int, byte[], int, int)" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] decodeFromFile(java.lang.String)" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] access$400(byte[], byte[], int, int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] decode(java.lang.String)" map="C"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] encodeBytesToBytes(byte[], int, int, int)" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] getAlphabet(int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] access$200(byte[], int, int, byte[], int, int)" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.String encodeObject(java.io.Serializable, int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] decode(java.lang.String, int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] access$000(int)" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="void decodeFileToFile(java.lang.String, java.lang.String)" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.String encodeBytes(byte[], int, int)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="void encodeToFile(byte[], java.lang.String)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.String encodeBytes(byte[], int, int, int)" map="C"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] getDecodabet(int)" map="C"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.String encodeObject(java.io.Serializable)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] decode(byte[])" map="C"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="java.lang.String encodeFromFile(java.lang.String)" map="D"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] encode3to4(byte[], byte[], int, int)" map="B"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="void encodeFileToFile(java.lang.String, java.lang.String)" map="C"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="void encode(java.nio.ByteBuffer, java.nio.ByteBuffer)" map="A"/>
  <method class="net.bluecow.googlecode.ant.Base64" name="byte[] access$100(int)" map="D"/>
  <package name="edu" map="B"/>
  <package name="edu.ncsu" map="A"/>
  <package name="edu.ncsu.csc517" map="A"/>
  <package name="edu.ncsu.csc517.dpp11" map="A"/>
  <package name="edu.ncsu.csc517.dpp11.gui" map="A"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleBox$1" map="1"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBox$1" name="val$pb" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBox$1" name="void run()" map="run"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleBox" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBox" name="puzzle" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBox" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBox" name="boolean areKeysShown()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBox" name="void setKeysShown(boolean)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBox" name="edu.ncsu.csc517.dpp11.data.Puzzle getPuzzle()" map="B"/>
  <class name="edu.ncsu.csc517.dpp11.gui.WordListScreen$1" map="1"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen$1" name="this$0" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen$1" name="val$callback" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.ncsu.csc517.dpp11.gui.WordListScreen" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="ps" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="fc" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="wordList" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="file" map="D"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="tableView" map="E"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="f" map="F"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="COLUMN_NAMES" map="G"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="menuBar" map="H"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="rand" map="I"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="mgr" map="J"/>
  <field class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="tableModel" map="K"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void setTable(java.util.Properties, edu.ncsu.csc517.dpp11.data.MapTableModel)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void addMenuItem(javax.swing.JMenu, java.lang.String, int, java.lang.String, java.lang.String)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void genRandom()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="java.awt.Component getMenuBar()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void setPuzzleScreen(edu.ncsu.csc517.dpp11.gui.PuzzleScreen)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void saveAs(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void showFrame(boolean)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void showPuzzle(java.util.Map)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void genSeed(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="javax.swing.table.TableColumnModel getTableColumnModel()" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void genSeed(long)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void loadPuzzle(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void setWordList(java.util.Properties)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void load(java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="javax.swing.table.TableColumn genColumn(int, int, java.lang.String)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void showPuzzle(edu.ncsu.csc517.dpp11.data.Puzzle)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="java.lang.Object[][] importTableData()" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void access$000(edu.ncsu.csc517.dpp11.gui.WordListScreen, java.lang.Throwable)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void exit(java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="java.awt.Component getTable()" map="E"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void showPuzzle(java.io.File)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="edu.ncsu.csc517.dpp11.data.MapTableModel getTableModel()" map="F"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void handleException(java.lang.Throwable)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void initialize(java.util.Map)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void genRandom(java.awt.event.ActionEvent)" map="F"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="javax.swing.JMenu addMenu(javax.swing.JMenuBar, java.lang.String, int, java.lang.String)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="java.util.Properties getWordList()" map="G"/>
  <method class="edu.ncsu.csc517.dpp11.gui.WordListScreen" name="void save(java.awt.event.ActionEvent)" map="G"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$2" map="2"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$2" name="this$0" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$2" name="val$callback" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$1" map="1"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$1" name="this$0" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$1" name="val$callback" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen$1" name="void itemStateChanged(java.awt.event.ItemEvent)" map="itemStateChanged"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="statefulMenuItemList" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="menuBar" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="file" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="fc" map="D"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="puzzle" map="E"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="mgr" map="F"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="puzzleDisplay" map="G"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="javax.swing.JCheckBoxMenuItem getStatefulMenuItem(java.lang.String)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void setCluesShown(boolean)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="int print(java.awt.Graphics, java.awt.print.PageFormat, int)" map="print"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="java.awt.Component getMenuBar()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void addMenuItem(javax.swing.JMenu, java.lang.String, int, java.lang.String, java.lang.String)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void setPuzzle(edu.ncsu.csc517.dpp11.data.Puzzle)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void saveAs(java.awt.event.ActionEvent)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void addCheckBoxMenuItem(javax.swing.JMenu, java.lang.String, int, java.lang.String, java.lang.String, boolean)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void newPuzzle(java.awt.event.ActionEvent)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void access$000(edu.ncsu.csc517.dpp11.gui.PuzzleScreen, java.lang.Throwable)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void load(java.io.File)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void showClues(java.awt.event.ItemEvent)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void showKeys(java.awt.event.ItemEvent)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay getPuzzleDisplay()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void setKeyShown(boolean)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void load(java.awt.event.ActionEvent)" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void exit(java.awt.event.ActionEvent)" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void edit(java.awt.event.ActionEvent)" map="E"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void handleException(java.lang.Throwable)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void initialize(java.util.Map)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="javax.swing.JMenu addMenu(javax.swing.JMenuBar, java.lang.String, int, java.lang.String)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleScreen" name="void printScreen(java.awt.event.ActionEvent)" map="F"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay$1" map="1"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay$1" name="val$pd" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay$1" name="void run()" map="run"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" map="D"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="puzzleBox" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="clueBox" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="puzzle" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="boolean areKeysShown()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="edu.ncsu.csc517.dpp11.gui.ClueBox getClueBox()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="edu.ncsu.csc517.dpp11.gui.PuzzleBox getPuzzleBox()" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="boolean areCluesShown()" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="edu.ncsu.csc517.dpp11.data.Puzzle getPuzzle()" map="E"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="void setCluesShown(boolean)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="void setKeysShown(boolean)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleDisplay" name="void print()" map="F"/>
  <class name="edu.ncsu.csc517.dpp11.gui.ClueBox" map="E"/>
  <field class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="EOL" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="puzzle" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="PREFERRED_RATIO" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="void initStylesForTextPane(javax.swing.JTextPane)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="java.lang.String[] appendString(javax.swing.text.Document, javax.swing.JTextPane, java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="edu.ncsu.csc517.dpp11.data.Puzzle getPuzzle()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.ClueBox" name="java.lang.String[] appendString(javax.swing.text.Document, javax.swing.JTextPane, java.lang.String, java.lang.String)" map="A"/>
  <class name="edu.ncsu.csc517.dpp11.gui.CrosswordManager" map="F"/>
  <field class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="puzzleScreen" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="wordList" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="wordListScreen" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="void switchScreens(java.util.Map)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="edu.ncsu.csc517.dpp11.gui.WordListScreen getWordListScreen()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="edu.ncsu.csc517.dpp11.gui.PuzzleScreen getPuzzleScreen()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="java.awt.Container getTop(java.awt.Container)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.CrosswordManager" name="java.awt.Container getTop()" map="C"/>
  <class name="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" map="G"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="cell" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="keyCa" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="keyShown" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="KEY_FONT" map="D"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="numCa" map="E"/>
  <field class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="NUMBER_FONT" map="F"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="void main(java.lang.String[])" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="boolean isKeyShown()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="java.awt.Dimension getPreferredSize()" map="getPreferredSize"/>
  <method class="edu.ncsu.csc517.dpp11.gui.PuzzleBoxCell" name="void setKeyShown(boolean)" map="A"/>
  <package name="edu.ncsu.csc517.dpp11.data" map="B"/>
  <class name="edu.ncsu.csc517.dpp11.data.Puzzle" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.Puzzle" name="java.util.Map getWordList()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.Puzzle" name="java.awt.Dimension getDimension()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.Puzzle" name="java.util.Map getClues(edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.Puzzle" name="edu.ncsu.csc517.dpp11.data.PuzzleCell getCell(int, int)" map="A"/>
  <class name="edu.ncsu.csc517.dpp11.data.PuzzleCellImpl" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.data.PuzzleCellImpl" name="userIndex" map="E"/>
  <field class="edu.ncsu.csc517.dpp11.data.PuzzleCellImpl" name="contents" map="F"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleCellImpl" name="int getUserIndex()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleCellImpl" name="int getContents()" map="B"/>
  <class name="edu.ncsu.csc517.dpp11.data.MapTableModel$2" map="2"/>
  <field class="edu.ncsu.csc517.dpp11.data.MapTableModel$2" name="this$0" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.data.MapTableModel$2" name="val$key" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel$2" name="java.lang.Object getKey()" map="getKey"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel$2" name="java.lang.Object setValue(java.lang.Object)" map="setValue"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel$2" name="java.lang.Object getValue()" map="getValue"/>
  <class name="edu.ncsu.csc517.dpp11.data.MapTableModel$1" map="1"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel$1" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <class name="edu.ncsu.csc517.dpp11.data.MapTableModel" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="mapEntries" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="KEY_COMPARATOR" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="map" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="tempKeyCount" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="int getColumnCount()" map="getColumnCount"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="java.lang.Object getValueAt(int, int)" map="getValueAt"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="java.util.Map access$000(edu.ncsu.csc517.dpp11.data.MapTableModel)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="void refresh()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="java.util.Map$Entry getEntry(java.lang.Object)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="int getRowCount()" map="getRowCount"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="java.util.Map$Entry getEntry(int)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="void setValueAt(java.lang.Object, int, int)" map="setValueAt"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModel" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="edu.ncsu.csc517.dpp11.data.PuzzleCell" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleCell" name="int getUserIndex()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleCell" name="int getContents()" map="B"/>
  <class name="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" map="E"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="EOL" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="s31s" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testClearPuzzle()" map="testClearPuzzle"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testScoring()" map="testScoring"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testGetMinimumSize()" map="testGetMinimumSize"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testWordFits()" map="testWordFits"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testClearPathForWord()" map="testClearPathForWord"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testPrePostLetters()" map="testPrePostLetters"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testToString()" map="testToString"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testBestPosition()" map="testBestPosition"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testWordAtLocation()" map="testWordAtLocation"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testPositionEquality()" map="testPositionEquality"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testAdjacentLetters()" map="testAdjacentLetters"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void assertBetween(int, int, int)" map="assertBetween"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testLettersMatch()" map="testLettersMatch"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testConstructor()" map="testConstructor"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testPlaceWord()" map="testPlaceWord"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testBuildCrossword()" map="testBuildCrossword"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testPositionToString()" map="testPositionToString"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testLegalPosition()" map="testLegalPosition"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testGetLongestWordLength()" map="testGetLongestWordLength"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testOneWord()" map="testOneWord"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void main(java.lang.String[])" map="main"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="junit.framework.Test suite()" map="suite"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="java.util.Map readPuzzle(edu.ncsu.csc517.dpp11.data.Puzzle, edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testPuzzleSize()" map="testPuzzleSize"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testCountLetters()" map="testCountLetters"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void assertContains(java.lang.String, edu.ncsu.csc517.dpp11.data.AngryPuzzle)" map="assertContains"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testWordAtLocationT()" map="testWordAtLocationT"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testGetClues()" map="testGetClues"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testSetUserIndices()" map="testSetUserIndices"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzleTest" name="void testUpdateSize()" map="testUpdateSize"/>
  <class name="edu.ncsu.csc517.dpp11.data.MapTableModelTest" map="F"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModelTest" name="void main(java.lang.String[])" map="main"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModelTest" name="void testValueFirstData()" map="testValueFirstData"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModelTest" name="void testExistingData()" map="testExistingData"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModelTest" name="junit.framework.Test suite()" map="suite"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModelTest" name="void testSimpleInsert()" map="testSimpleInsert"/>
  <method class="edu.ncsu.csc517.dpp11.data.MapTableModelTest" name="void testOverwritingData()" map="testOverwritingData"/>
  <class name="edu.ncsu.csc517.dpp11.data.PuzzleStub" map="G"/>
  <field class="edu.ncsu.csc517.dpp11.data.PuzzleStub" name="a" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleStub" name="java.util.Map getWordList()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleStub" name="java.awt.Dimension getDimension()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleStub" name="boolean prime(int)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleStub" name="java.util.Map getClues(edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.PuzzleStub" name="edu.ncsu.csc517.dpp11.data.PuzzleCell getCell(int, int)" map="A"/>
  <class name="edu.ncsu.csc517.dpp11.data.Direction" map="H"/>
  <field class="edu.ncsu.csc517.dpp11.data.Direction" name="ACROSS" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.data.Direction" name="name" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.data.Direction" name="DOWN" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.data.Direction" name="java.util.Iterator iterator()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.Direction" name="java.lang.String getName()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.Direction" name="java.lang.String toString()" map="toString"/>
  <class name="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position" map="_A"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position" name="x" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position" name="direction" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position" name="y" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position" name="boolean equals(edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position" name="java.lang.String toString()" map="toString"/>
  <class name="edu.ncsu.csc517.dpp11.data.AngryPuzzle$PuzzleFullException" map="_B"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$PuzzleFullException" name="this$0" map="A"/>
  <class name="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" map="_C"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="userIndex" map="A"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="wordDown" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="contents" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="wordAcross" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="void setWord(java.lang.String, edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="int getUserIndex()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="void setUserIndex(int)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="java.lang.String getWord(edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="int getContents()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Cell" name="void setContents(int)" map="B"/>
  <class name="edu.ncsu.csc517.dpp11.data.AngryPuzzle" map="I"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="SIZE_RETRIES" map="B"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="wordList" map="C"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="EOL" map="D"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="grid" map="E"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="rand" map="F"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="growAcrossNext" map="G"/>
  <field class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="LOAD_RATIO" map="H"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="boolean wordFits(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="boolean checkAdjacentLetters(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="java.awt.Dimension getMinimumSize()" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="edu.ncsu.csc517.dpp11.data.PuzzleCell getCell(int, int)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="boolean clearPathForWord(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="C"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void placeWord(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="java.util.Map getClues(edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="java.lang.String toString()" map="toString"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position getBestPosition(java.lang.String)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void genMatrix(java.awt.Dimension)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void buildCrossword()" map="D"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="int scoreWord(java.lang.String, edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="int getLongestWordLength()" map="E"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="java.lang.String getWordAtLocation(int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void placeWord(java.lang.String, edu.ncsu.csc517.dpp11.data.AngryPuzzle$Position)" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="boolean checkPrePostLetters(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="E"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void buildBestCrossword()" map="F"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="java.awt.Dimension getDimension()" map="B"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void clearPuzzle()" map="G"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="int getShortestWordLength()" map="H"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void setUserIndices()" map="I"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void updateSize()" map="J"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="int countLetters()" map="K"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="boolean lettersMatch(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="F"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="int countCrossedLetters(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="G"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="java.util.Map getWordList()" map="A"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="int scoreWord(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="H"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="boolean legalPosition(java.lang.String, int, int, edu.ncsu.csc517.dpp11.data.Direction)" map="I"/>
  <method class="edu.ncsu.csc517.dpp11.data.AngryPuzzle" name="void genMatrix(int, int)" map="B"/>
  <package name="org.jdesktop" map="A"/>
  <package name="org.jdesktop.swingx" map="A"/>
  <class name="org.jdesktop.swingx.MultiSplitLayout$Node" map="_A"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout$Node" name="parent" map="A"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout$Node" name="bounds" map="B"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout$Node" name="weight" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="java.awt.Rectangle getBounds()" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="org.jdesktop.swingx.MultiSplitLayout$Split getParent()" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="void setParent(org.jdesktop.swingx.MultiSplitLayout$Split)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="org.jdesktop.swingx.MultiSplitLayout$Node siblingAtOffset(int)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="org.jdesktop.swingx.MultiSplitLayout$Node previousSibling()" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="void setWeight(double)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="double getWeight()" map="D"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="void setBounds(java.awt.Rectangle)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Node" name="org.jdesktop.swingx.MultiSplitLayout$Node nextSibling()" map="E"/>
  <class name="org.jdesktop.swingx.MultiSplitLayout$Divider" map="_B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Divider" name="boolean isVertical()" map="F"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Divider" name="void setWeight(double)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Divider" name="java.lang.String toString()" map="toString"/>
  <class name="org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException" map="_C"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException" name="node" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$InvalidLayoutException" name="org.jdesktop.swingx.MultiSplitLayout$Node getNode()" map="A"/>
  <class name="org.jdesktop.swingx.MultiSplitLayout$Leaf" map="_D"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout$Leaf" name="name" map="D"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Leaf" name="void setName(java.lang.String)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Leaf" name="java.lang.String getName()" map="G"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Leaf" name="java.lang.String toString()" map="toString"/>
  <class name="org.jdesktop.swingx.MultiSplitLayout$Split" map="_E"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout$Split" name="rowLayout" map="E"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout$Split" name="children" map="F"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Split" name="boolean isRowLayout()" map="H"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Split" name="void setRowLayout(boolean)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Split" name="java.util.List getChildren()" map="I"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Split" name="void setChildren(java.util.List)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Split" name="org.jdesktop.swingx.MultiSplitLayout$Node lastWeightedChild()" map="J"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout$Split" name="java.lang.String toString()" map="toString"/>
  <class name="org.jdesktop.swingx.MultiSplitLayout" map="A"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout" name="floatingDividers" map="A"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout" name="dividerSize" map="B"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout" name="model" map="C"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout" name="pcs" map="D"/>
  <field class="org.jdesktop.swingx.MultiSplitLayout" name="childMap" map="E"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void parseLeaf(java.io.StreamTokenizer, org.jdesktop.swingx.MultiSplitLayout$Split)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void throwParseException(java.io.StreamTokenizer, java.lang.String)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void parseAttribute(java.lang.String, java.io.StreamTokenizer, org.jdesktop.swingx.MultiSplitLayout$Node)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Dimension preferredLayoutSize(java.awt.Container)" map="preferredLayoutSize"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void throwInvalidLayout(java.lang.String, org.jdesktop.swingx.MultiSplitLayout$Node)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Dimension sizeWithInsets(java.awt.Container, java.awt.Dimension)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void layoutGrow(org.jdesktop.swingx.MultiSplitLayout$Split, java.awt.Rectangle)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="int getDividerSize()" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="org.jdesktop.swingx.MultiSplitLayout$Divider dividerAt(int, int)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.util.List dividersThatOverlap(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void parseSplit(java.io.StreamTokenizer, org.jdesktop.swingx.MultiSplitLayout$Split)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="boolean getFloatingDividers()" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void addSplitChild(org.jdesktop.swingx.MultiSplitLayout$Split, org.jdesktop.swingx.MultiSplitLayout$Node)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Dimension minimumNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.util.List dividersThatOverlap(java.awt.Rectangle)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Dimension minimumLayoutSize(java.awt.Container)" map="minimumLayoutSize"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void addLayoutComponent(java.lang.String, java.awt.Component)" map="addLayoutComponent"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void removePropertyChangeListener(java.beans.PropertyChangeListener)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Dimension preferredComponentSize(org.jdesktop.swingx.MultiSplitLayout$Node)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Component childForNode(org.jdesktop.swingx.MultiSplitLayout$Node)" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void removeLayoutComponent(java.awt.Component)" map="removeLayoutComponent"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Dimension preferredNodeSize(org.jdesktop.swingx.MultiSplitLayout$Node)" map="D"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void firePCS(java.lang.String, java.lang.Object, java.lang.Object)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void printModel(java.lang.String, org.jdesktop.swingx.MultiSplitLayout$Node)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="org.jdesktop.swingx.MultiSplitLayout$Node getModel()" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void minimizeSplitBounds(org.jdesktop.swingx.MultiSplitLayout$Split, java.awt.Rectangle)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void layoutShrink(org.jdesktop.swingx.MultiSplitLayout$Split, java.awt.Rectangle)" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void checkLayout(org.jdesktop.swingx.MultiSplitLayout$Node)" map="E"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void addPropertyChangeListener(java.beans.PropertyChangeListener)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="org.jdesktop.swingx.MultiSplitLayout$Node parseModel(java.lang.String)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Rectangle boundsWithYandHeight(java.awt.Rectangle, double, double)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="org.jdesktop.swingx.MultiSplitLayout$Node parseModel(java.io.Reader)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void layoutContainer(java.awt.Container)" map="layoutContainer"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void printModel(org.jdesktop.swingx.MultiSplitLayout$Node)" map="F"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Dimension minimumComponentSize(org.jdesktop.swingx.MultiSplitLayout$Node)" map="G"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void layout1(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="org.jdesktop.swingx.MultiSplitLayout$Divider dividerAt(org.jdesktop.swingx.MultiSplitLayout$Node, int, int)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void setDividerSize(int)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void layout2(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void setFloatingDividers(boolean)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="void setModel(org.jdesktop.swingx.MultiSplitLayout$Node)" map="H"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="boolean nodeOverlapsRectangle(org.jdesktop.swingx.MultiSplitLayout$Node, java.awt.Rectangle)" map="D"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.beans.PropertyChangeListener[] getPropertyChangeListeners()" map="D"/>
  <method class="org.jdesktop.swingx.MultiSplitLayout" name="java.awt.Rectangle boundsWithXandWidth(java.awt.Rectangle, double, double)" map="B"/>
  <class name="org.jdesktop.swingx.MultiSplitPane$DefaultDividerPainter" map="_A"/>
  <field class="org.jdesktop.swingx.MultiSplitPane$DefaultDividerPainter" name="this$0" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$DefaultDividerPainter" name="void paint(java.awt.Graphics, org.jdesktop.swingx.MultiSplitLayout$Divider)" map="A"/>
  <class name="org.jdesktop.swingx.MultiSplitPane$DividerPainter" map="_B"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$DividerPainter" name="void paint(java.awt.Graphics, org.jdesktop.swingx.MultiSplitLayout$Divider)" map="A"/>
  <class name="org.jdesktop.swingx.MultiSplitPane$1" map="1"/>
  <class name="org.jdesktop.swingx.MultiSplitPane$AccessibleMultiSplitPane" map="_C"/>
  <field class="org.jdesktop.swingx.MultiSplitPane$AccessibleMultiSplitPane" name="this$0" map="this$0"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$AccessibleMultiSplitPane" name="javax.accessibility.AccessibleRole getAccessibleRole()" map="getAccessibleRole"/>
  <class name="org.jdesktop.swingx.MultiSplitPane$InputHandler" map="_D"/>
  <field class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="this$0" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void mouseDragged(java.awt.event.MouseEvent)" map="mouseDragged"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void mouseMoved(java.awt.event.MouseEvent)" map="mouseMoved"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void mousePressed(java.awt.event.MouseEvent)" map="mousePressed"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="org.jdesktop.swingx.MultiSplitPane$InputHandler" name="void mouseReleased(java.awt.event.MouseEvent)" map="mouseReleased"/>
  <class name="org.jdesktop.swingx.MultiSplitPane" map="B"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="dragOffsetY" map="A"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="dragOffsetX" map="B"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="dragMin" map="C"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="dragDivider" map="D"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="accessibleContext" map="E"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="dragUnderway" map="F"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="dividerPainter" map="G"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="continuousLayout" map="H"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="dragMax" map="I"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="oldFloatingDividers" map="J"/>
  <field class="org.jdesktop.swingx.MultiSplitPane" name="initialDividerBounds" map="K"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void access$400(org.jdesktop.swingx.MultiSplitPane, int, int)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="org.jdesktop.swingx.MultiSplitLayout$Divider activeDivider()" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void access$600(org.jdesktop.swingx.MultiSplitPane)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="org.jdesktop.swingx.MultiSplitLayout getMultiSplitLayout()" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="org.jdesktop.swingx.MultiSplitPane$DividerPainter getDividerPainter()" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void updateCursor(int, int, boolean)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void repaintDragLimits()" map="D"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void setDividerPainter(org.jdesktop.swingx.MultiSplitPane$DividerPainter)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void access$500(org.jdesktop.swingx.MultiSplitPane, int, int)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="javax.accessibility.AccessibleContext getAccessibleContext()" map="getAccessibleContext"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void clearDragState()" map="E"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void cancelDrag()" map="F"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void setContinuousLayout(boolean)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void access$200(org.jdesktop.swingx.MultiSplitPane, int, int, boolean)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void updateDrag(int, int)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void setModel(org.jdesktop.swingx.MultiSplitLayout$Node)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void setDividerSize(int)" map="A"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void access$300(org.jdesktop.swingx.MultiSplitPane, int, int)" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void finishDrag(int, int)" map="B"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="boolean isContinuousLayout()" map="G"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void startDrag(int, int)" map="C"/>
  <method class="org.jdesktop.swingx.MultiSplitPane" name="void paintChildren(java.awt.Graphics)" map="paintChildren"/>
  <package name="org.sharp.annotation" map="A"/>
  <class name="org.sharp.annotation.Log" map="A"/>
  <package name="org.sharp.utils" map="B"/>
  <class name="org.sharp.utils.TelnetCli" map="A"/>
  <method class="org.sharp.utils.TelnetCli" name="void close()" map="A"/>
  <method class="org.sharp.utils.TelnetCli" name="void open()" map="B"/>
  <method class="org.sharp.utils.TelnetCli" name="java.lang.String exec(java.lang.String)" map="A"/>
  <class name="org.sharp.utils.SocketSer$1" map="1"/>
  <field class="org.sharp.utils.SocketSer$1" name="val$port" map="A"/>
  <method class="org.sharp.utils.SocketSer$1" name="void run()" map="run"/>
  <class name="org.sharp.utils.SocketSer$SocketProcessorFac" map="_A"/>
  <method class="org.sharp.utils.SocketSer$SocketProcessorFac" name="java.lang.Runnable runnable(java.net.Socket)" map="A"/>
  <class name="org.sharp.utils.SocketSer$ShutdownPCProcessorFac$1" map="1"/>
  <field class="org.sharp.utils.SocketSer$ShutdownPCProcessorFac$1" name="this$0" map="A"/>
  <field class="org.sharp.utils.SocketSer$ShutdownPCProcessorFac$1" name="val$socket" map="B"/>
  <method class="org.sharp.utils.SocketSer$ShutdownPCProcessorFac$1" name="void run()" map="run"/>
  <class name="org.sharp.utils.SocketSer$ShutdownPCProcessorFac" map="_B"/>
  <method class="org.sharp.utils.SocketSer$ShutdownPCProcessorFac" name="java.lang.Runnable runnable(java.net.Socket)" map="A"/>
  <class name="org.sharp.utils.SocketSer" map="B"/>
  <method class="org.sharp.utils.SocketSer" name="void startShutdownListener(int)" map="A"/>
  <class name="org.sharp.utils.AsmUtils" map="C"/>
  <method class="org.sharp.utils.AsmUtils" name="java.lang.Object array2Collection(java.lang.Object)" map="A"/>
  <class name="org.sharp.utils.SdbUtils" map="D"/>
  <field class="org.sharp.utils.SdbUtils" name="sdb" map="A"/>
  <method class="org.sharp.utils.SdbUtils" name="void queryDomain(java.lang.String)" map="A"/>
  <method class="org.sharp.utils.SdbUtils" name="void putAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.SdbUtils" name="void createDomain(java.lang.String)" map="B"/>
  <method class="org.sharp.utils.SdbUtils" name="void init()" map="A"/>
  <class name="org.sharp.utils.ScalaCli" map="E"/>
  <class name="org.sharp.utils.BaseFileHandler" map="F"/>
  <field class="org.sharp.utils.BaseFileHandler" name="dc" map="E"/>
  <field class="org.sharp.utils.BaseFileHandler" name="fc" map="F"/>
  <field class="org.sharp.utils.BaseFileHandler" name="fl" map="G"/>
  <method class="org.sharp.utils.BaseFileHandler" name="void handle(java.io.File)" map="A"/>
  <method class="org.sharp.utils.BaseFileHandler" name="org.sharp.utils.FileHandler summary(java.util.Map)" map="A"/>
  <method class="org.sharp.utils.BaseFileHandler" name="void handleDir(java.io.File)" map="B"/>
  <class name="org.sharp.utils.LangUtils$2" map="2"/>
  <field class="org.sharp.utils.LangUtils$2" name="val$sa" map="A"/>
  <method class="org.sharp.utils.LangUtils$2" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <class name="org.sharp.utils.LangUtils$1" map="1"/>
  <method class="org.sharp.utils.LangUtils$1" name="java.lang.Object f(java.lang.Object)" map="f"/>
  <method class="org.sharp.utils.LangUtils$1" name="java.lang.String f(java.lang.Object)" map="f"/>
  <class name="org.sharp.utils.LangUtils" map="G"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.Object[] mapTo(java.lang.Object[], fj.F, java.lang.Class)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String[] toStringArray(java.lang.Object[])" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String toShortStr(java.util.Date)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.util.Collection toCollection(java.lang.Object[])" map="B"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.Object[] toArray(java.util.List, java.lang.Class)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.util.Comparator objectComparator(boolean)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String join(java.lang.String[], java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String join(java.lang.String[], java.lang.String)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="boolean containsWord(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String join(java.lang.Object[], java.lang.Class, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.Object defaultIfNull(java.lang.Object, java.lang.Object)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String affix(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.utils.LangUtils" name="void sort(java.lang.Object[])" map="C"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.Object elementAt(java.lang.Object[], int)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="boolean bgrep(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String join(java.lang.String, java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.Object elementAt(java.lang.Object[], int, java.lang.Object)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.Object[] removeNull(java.lang.Object[], java.lang.Class)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.Object[] append(java.lang.Object[], java.lang.Object)" map="A"/>
  <method class="org.sharp.utils.LangUtils" name="java.lang.String[] split(java.lang.String, java.lang.String)" map="C"/>
  <class name="org.sharp.utils.AesCypher" map="H"/>
  <field class="org.sharp.utils.AesCypher" name="ecipher" map="A"/>
  <field class="org.sharp.utils.AesCypher" name="buf" map="B"/>
  <field class="org.sharp.utils.AesCypher" name="dcipher" map="C"/>
  <method class="org.sharp.utils.AesCypher" name="void decrypt(java.io.InputStream, java.io.OutputStream)" map="A"/>
  <method class="org.sharp.utils.AesCypher" name="void encrypt(java.io.InputStream, java.io.OutputStream)" map="B"/>
  <method class="org.sharp.utils.AesCypher" name="javax.crypto.SecretKey secretKey(byte[])" map="A"/>
  <method class="org.sharp.utils.AesCypher" name="void decrypt(java.io.File, java.io.File, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.AesCypher" name="void encrypt(java.io.File, java.io.File, java.lang.String)" map="B"/>
  <class name="org.sharp.utils.FsUtils$6" map="6"/>
  <field class="org.sharp.utils.FsUtils$6" name="val$out" map="A"/>
  <field class="org.sharp.utils.FsUtils$6" name="val$base" map="B"/>
  <field class="org.sharp.utils.FsUtils$6" name="basePath" map="C"/>
  <method class="org.sharp.utils.FsUtils$6" name="void handle(java.io.File)" map="A"/>
  <method class="org.sharp.utils.FsUtils$6" name="void handleDir(java.io.File)" map="B"/>
  <class name="org.sharp.utils.FsUtils$5" map="5"/>
  <field class="org.sharp.utils.FsUtils$5" name="val$todir" map="val$todir"/>
  <field class="org.sharp.utils.FsUtils$5" name="val$base" map="val$base"/>
  <field class="org.sharp.utils.FsUtils$5" name="val$dep" map="val$dep"/>
  <method class="org.sharp.utils.FsUtils$5" name="void travel()" map="travel"/>
  <method class="org.sharp.utils.FsUtils$5" name="boolean handleDirectory(java.io.File, int, java.util.Collection)" map="handleDirectory"/>
  <class name="org.sharp.utils.FsUtils$4" map="4"/>
  <field class="org.sharp.utils.FsUtils$4" name="val$todir" map="val$todir"/>
  <field class="org.sharp.utils.FsUtils$4" name="val$base" map="val$base"/>
  <method class="org.sharp.utils.FsUtils$4" name="void travel()" map="travel"/>
  <method class="org.sharp.utils.FsUtils$4" name="boolean handleDirectory(java.io.File, int, java.util.Collection)" map="handleDirectory"/>
  <class name="org.sharp.utils.FsUtils$3" map="3"/>
  <field class="org.sharp.utils.FsUtils$3" name="val$word" map="H"/>
  <method class="org.sharp.utils.FsUtils$3" name="void handle(java.io.File)" map="A"/>
  <class name="org.sharp.utils.FsUtils$2" map="2"/>
  <method class="org.sharp.utils.FsUtils$2" name="void handle(java.io.File)" map="A"/>
  <class name="org.sharp.utils.FsUtils$DirSnaps$CacheSupport" map="_A"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps$CacheSupport" name="java.lang.String cacheDir()" map="A"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps$CacheSupport" name="java.lang.String cacheFile(java.lang.String)" map="A"/>
  <class name="org.sharp.utils.FsUtils$DirSnaps$1" map="1"/>
  <field class="org.sharp.utils.FsUtils$DirSnaps$1" name="val$list" map="D"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps$1" name="void handle(java.io.File)" map="A"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps$1" name="void handleDir(java.io.File)" map="B"/>
  <class name="org.sharp.utils.FsUtils$DirSnaps" map="_A"/>
  <field class="org.sharp.utils.FsUtils$DirSnaps" name="map" map="A"/>
  <field class="org.sharp.utils.FsUtils$DirSnaps" name="supporter" map="B"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps" name="org.sharp.utils.beans.DirSnap get(java.lang.String, byte)" map="A"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps" name="org.sharp.utils.beans.DirSnap get(java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps" name="java.lang.String cacheDir()" map="A"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps" name="org.sharp.utils.beans.DirSnap genSnap(java.lang.String)" map="B"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps" name="java.lang.String genCacheFileName(java.lang.String)" map="C"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps" name="void toFile(org.sharp.utils.beans.DirSnap, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils$DirSnaps" name="org.sharp.utils.beans.DirSnap fromFile(java.lang.String)" map="D"/>
  <class name="org.sharp.utils.FsUtils$1" map="1"/>
  <field class="org.sharp.utils.FsUtils$1" name="val$filename" map="I"/>
  <method class="org.sharp.utils.FsUtils$1" name="void handle(java.io.File)" map="A"/>
  <class name="org.sharp.utils.FsUtils" map="I"/>
  <method class="org.sharp.utils.FsUtils" name="java.lang.Object saveJson(java.lang.Object, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void unpackJpword(java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void zip(java.io.File, int, java.io.File)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void packJpword(java.lang.String, java.lang.String, int, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void unzip(java.io.File, java.io.File)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="java.lang.Object saveCastor(java.lang.Object, java.lang.String)" map="B"/>
  <method class="org.sharp.utils.FsUtils" name="void uploadJpword(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="java.io.File[] findMp3WaveFiles(java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="java.io.File[] findWavFile(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="java.lang.Object xmlDecode(java.lang.String, java.lang.Object)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void access$000(org.sharp.utils.FsUtils, java.lang.String, org.sharp.utils.FileHandler)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void travDir(java.lang.String, org.sharp.utils.FileHandler)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void zip(java.io.File, java.lang.String, java.io.File)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="java.lang.Object loadCastor(java.lang.String, java.lang.Class)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void zip(java.io.File, java.io.File, java.io.File)" map="A"/>
  <method class="org.sharp.utils.FsUtils" name="void xmlEncode(java.lang.String, java.lang.Object)" map="B"/>
  <method class="org.sharp.utils.FsUtils" name="java.io.File copyFileToDirectory(java.io.File, java.lang.String, java.io.File)" map="B"/>
  <method class="org.sharp.utils.FsUtils" name="java.io.File[] findNamedFiles(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.utils.FsUtils" name="java.lang.Object loadJson(java.lang.String, java.lang.Class, java.lang.Object)" map="A"/>
  <class name="org.sharp.utils.PoiUtils$1" map="1"/>
  <method class="org.sharp.utils.PoiUtils$1" name="java.io.InputStream contentStream(java.io.File)" map="A"/>
  <class name="org.sharp.utils.PoiUtils$Phrase" map="_A"/>
  <field class="org.sharp.utils.PoiUtils$Phrase" name="paragraphSeperator" map="A"/>
  <field class="org.sharp.utils.PoiUtils$Phrase" name="color" map="B"/>
  <field class="org.sharp.utils.PoiUtils$Phrase" name="text" map="C"/>
  <method class="org.sharp.utils.PoiUtils$Phrase" name="java.util.List filter(java.util.List, int)" map="A"/>
  <class name="org.sharp.utils.PoiUtils" map="J"/>
  <method class="org.sharp.utils.PoiUtils" name="java.lang.String extractWordText(java.io.File)" map="A"/>
  <method class="org.sharp.utils.PoiUtils" name="org.sharp.intf.ContentParser newWorddocConentParser()" map="A"/>
  <method class="org.sharp.utils.PoiUtils" name="java.lang.String doc2Html(java.io.File)" map="B"/>
  <method class="org.sharp.utils.PoiUtils" name="void parseWordText(java.io.File, java.util.List, java.util.Set)" map="A"/>
  <class name="org.sharp.utils.Lucene$SearchResult" map="_A"/>
  <method class="org.sharp.utils.Lucene$SearchResult" name="org.apache.lucene.search.TopDocs hits()" map="A"/>
  <method class="org.sharp.utils.Lucene$SearchResult" name="org.apache.lucene.document.Document doc(int)" map="A"/>
  <method class="org.sharp.utils.Lucene$SearchResult" name="void close()" map="B"/>
  <class name="org.sharp.utils.Lucene$Indexable" map="_B"/>
  <field class="org.sharp.utils.Lucene$Indexable" name="FN_MODIFIED" map="A"/>
  <field class="org.sharp.utils.Lucene$Indexable" name="FN_CONTENTS" map="B"/>
  <field class="org.sharp.utils.Lucene$Indexable" name="FN_ID" map="C"/>
  <field class="org.sharp.utils.Lucene$Indexable" name="DT_FILE" map="D"/>
  <field class="org.sharp.utils.Lucene$Indexable" name="FN_TYPE" map="E"/>
  <method class="org.sharp.utils.Lucene$Indexable" name="java.lang.String id()" map="A"/>
  <method class="org.sharp.utils.Lucene$Indexable" name="org.apache.lucene.document.Document toDocument()" map="B"/>
  <method class="org.sharp.utils.Lucene$Indexable" name="java.lang.String docType()" map="C"/>
  <method class="org.sharp.utils.Lucene$Indexable" name="void close()" map="D"/>
  <class name="org.sharp.utils.Lucene$2" map="2"/>
  <field class="org.sharp.utils.Lucene$2" name="this$0" map="A"/>
  <field class="org.sharp.utils.Lucene$2" name="val$searcher" map="B"/>
  <field class="org.sharp.utils.Lucene$2" name="val$results" map="C"/>
  <method class="org.sharp.utils.Lucene$2" name="org.apache.lucene.search.TopDocs hits()" map="A"/>
  <method class="org.sharp.utils.Lucene$2" name="org.apache.lucene.document.Document doc(int)" map="A"/>
  <method class="org.sharp.utils.Lucene$2" name="void close()" map="B"/>
  <class name="org.sharp.utils.Lucene$1" map="1"/>
  <field class="org.sharp.utils.Lucene$1" name="val$searcher" map="D"/>
  <field class="org.sharp.utils.Lucene$1" name="val$results" map="E"/>
  <method class="org.sharp.utils.Lucene$1" name="org.apache.lucene.search.TopDocs hits()" map="A"/>
  <method class="org.sharp.utils.Lucene$1" name="org.apache.lucene.document.Document doc(int)" map="A"/>
  <method class="org.sharp.utils.Lucene$1" name="void close()" map="B"/>
  <class name="org.sharp.utils.Lucene$IndexableFile" map="_C"/>
  <field class="org.sharp.utils.Lucene$IndexableFile" name="contentStream" map="F"/>
  <field class="org.sharp.utils.Lucene$IndexableFile" name="file" map="G"/>
  <method class="org.sharp.utils.Lucene$IndexableFile" name="java.lang.String id()" map="A"/>
  <method class="org.sharp.utils.Lucene$IndexableFile" name="org.apache.lucene.document.Document toDocument()" map="B"/>
  <method class="org.sharp.utils.Lucene$IndexableFile" name="java.lang.String docType()" map="C"/>
  <method class="org.sharp.utils.Lucene$IndexableFile" name="void close()" map="D"/>
  <class name="org.sharp.utils.Lucene$TextHighlighter$1" map="1"/>
  <field class="org.sharp.utils.Lucene$TextHighlighter$1" name="ts" map="ts"/>
  <field class="org.sharp.utils.Lucene$TextHighlighter$1" name="ot" map="ot"/>
  <method class="org.sharp.utils.Lucene$TextHighlighter$1" name="boolean isNewFragment()" map="isNewFragment"/>
  <method class="org.sharp.utils.Lucene$TextHighlighter$1" name="void start(java.lang.String, org.apache.lucene.analysis.TokenStream)" map="start"/>
  <class name="org.sharp.utils.Lucene$TextHighlighter" map="_D"/>
  <method class="org.sharp.utils.Lucene$TextHighlighter" name="java.lang.String[] highlight(java.lang.String, java.lang.String, int, org.apache.lucene.search.highlight.Fragmenter, org.apache.lucene.analysis.Analyzer, org.apache.lucene.search.highlight.Formatter)" map="A"/>
  <method class="org.sharp.utils.Lucene$TextHighlighter" name="org.apache.lucene.search.highlight.Fragmenter newSentenceFragmenter()" map="A"/>
  <method class="org.sharp.utils.Lucene$TextHighlighter" name="java.lang.String[] highlight(java.lang.String, java.lang.String)" map="A"/>
  <class name="org.sharp.utils.Lucene" map="K"/>
  <field class="org.sharp.utils.Lucene" name="indexWriter" map="A"/>
  <method class="org.sharp.utils.Lucene" name="java.lang.String englishStem(java.lang.String)" map="A"/>
  <method class="org.sharp.utils.Lucene" name="void deleteAll(java.lang.String)" map="B"/>
  <method class="org.sharp.utils.Lucene" name="void close(org.sharp.utils.Lucene)" map="A"/>
  <method class="org.sharp.utils.Lucene" name="void indexDoc(java.lang.String, org.sharp.utils.Lucene$Indexable)" map="A"/>
  <method class="org.sharp.utils.Lucene" name="org.sharp.utils.Lucene$SearchResult queryDocs(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.Lucene" name="org.apache.commons.lang3.tuple.Pair parseDocId(java.lang.String)" map="C"/>
  <method class="org.sharp.utils.Lucene" name="org.apache.lucene.analysis.Analyzer newSnowballAnalyzer(java.lang.String)" map="D"/>
  <method class="org.sharp.utils.Lucene" name="java.lang.String genDocId(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.Lucene" name="org.apache.lucene.index.IndexWriter newIndexWriter(java.lang.String)" map="E"/>
  <method class="org.sharp.utils.Lucene" name="void closeIndexWriter()" map="A"/>
  <method class="org.sharp.utils.Lucene" name="int termFreqVector(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.utils.Lucene" name="org.sharp.utils.Lucene$SearchResult queryDocs(java.lang.String, org.apache.lucene.search.Query)" map="A"/>
  <class name="org.sharp.utils.JdkUtils$KeyValue" map="_A"/>
  <field class="org.sharp.utils.JdkUtils$KeyValue" name="key" map="A"/>
  <field class="org.sharp.utils.JdkUtils$KeyValue" name="value" map="B"/>
  <method class="org.sharp.utils.JdkUtils$KeyValue" name="void setValue(java.lang.Object)" map="A"/>
  <method class="org.sharp.utils.JdkUtils$KeyValue" name="java.lang.Object getKey()" map="A"/>
  <method class="org.sharp.utils.JdkUtils$KeyValue" name="java.lang.Object getValue()" map="B"/>
  <method class="org.sharp.utils.JdkUtils$KeyValue" name="void setKey(java.lang.Object)" map="B"/>
  <class name="org.sharp.utils.JdkUtils$ArrayWrapper" map="_B"/>
  <field class="org.sharp.utils.JdkUtils$ArrayWrapper" name="object" map="A"/>
  <method class="org.sharp.utils.JdkUtils$ArrayWrapper" name="void setObject(java.lang.Object[])" map="A"/>
  <method class="org.sharp.utils.JdkUtils$ArrayWrapper" name="java.lang.Object[] getObject()" map="A"/>
  <class name="org.sharp.utils.JdkUtils" map="L"/>
  <method class="org.sharp.utils.JdkUtils" name="java.io.Reader getResourceAsReader(java.lang.String)" map="A"/>
  <method class="org.sharp.utils.JdkUtils" name="void shutdownPC()" map="A"/>
  <method class="org.sharp.utils.JdkUtils" name="java.lang.String readerToString(java.io.Reader)" map="A"/>
  <method class="org.sharp.utils.JdkUtils" name="void sleep(long)" map="A"/>
  <class name="org.sharp.utils.AntUtils" map="M"/>
  <method class="org.sharp.utils.AntUtils" name="java.lang.String[] listDirs(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.utils.AntUtils" name="java.lang.String[] listFiles(java.lang.String, java.lang.String)" map="B"/>
  <class name="org.sharp.utils.Jdk7Utils" map="N"/>
  <method class="org.sharp.utils.Jdk7Utils" name="void monitorDir(java.lang.String)" map="A"/>
  <class name="org.sharp.utils.XmlUtils" map="O"/>
  <method class="org.sharp.utils.XmlUtils" name="java.lang.String[] xpath(java.lang.String, java.lang.String)" map="A"/>
  <class name="org.sharp.utils.Mp3Player$PlayerCallBack" map="_A"/>
  <method class="org.sharp.utils.Mp3Player$PlayerCallBack" name="void oneSecondPlayed(double)" map="A"/>
  <method class="org.sharp.utils.Mp3Player$PlayerCallBack" name="void endOfMedia(int)" map="A"/>
  <class name="org.sharp.utils.Mp3Player" map="P"/>
  <field class="org.sharp.utils.Mp3Player" name="bytes" map="A"/>
  <field class="org.sharp.utils.Mp3Player" name="pcb" map="B"/>
  <field class="org.sharp.utils.Mp3Player" name="control" map="C"/>
  <field class="org.sharp.utils.Mp3Player" name="fps" map="D"/>
  <field class="org.sharp.utils.Mp3Player" name="duration" map="E"/>
  <field class="org.sharp.utils.Mp3Player" name="microseconds" map="F"/>
  <method class="org.sharp.utils.Mp3Player" name="java.lang.String nowplayed()" map="nowplayed"/>
  <method class="org.sharp.utils.Mp3Player" name="void seek(double)" map="seek"/>
  <method class="org.sharp.utils.Mp3Player" name="boolean resume()" map="resume"/>
  <method class="org.sharp.utils.Mp3Player" name="void setController(javazoom.jlgui.basicplayer.BasicController)" map="setController"/>
  <method class="org.sharp.utils.Mp3Player" name="void stateUpdated(javazoom.jlgui.basicplayer.BasicPlayerEvent)" map="stateUpdated"/>
  <method class="org.sharp.utils.Mp3Player" name="void progress(int, long, byte[], java.util.Map)" map="progress"/>
  <method class="org.sharp.utils.Mp3Player" name="boolean pause()" map="pause"/>
  <method class="org.sharp.utils.Mp3Player" name="void opened(java.lang.Object, java.util.Map)" map="opened"/>
  <method class="org.sharp.utils.Mp3Player" name="void play(java.lang.String)" map="play"/>
  <method class="org.sharp.utils.Mp3Player" name="java.lang.String duration()" map="duration"/>
  <class name="org.sharp.utils.FileHandler" map="Q"/>
  <method class="org.sharp.utils.FileHandler" name="void handle(java.io.File)" map="A"/>
  <method class="org.sharp.utils.FileHandler" name="void handleDir(java.io.File)" map="B"/>
  <class name="org.sharp.utils.HtmlUtils" map="R"/>
  <method class="org.sharp.utils.HtmlUtils" name="java.lang.String htmlFile2Text(java.lang.String, int)" map="A"/>
  <class name="org.sharp.utils.HttpCli" map="S"/>
  <method class="org.sharp.utils.HttpCli" name="java.io.Reader reader(java.lang.String)" map="A"/>
  <method class="org.sharp.utils.HttpCli" name="java.io.Reader post(java.lang.String, java.util.Map)" map="A"/>
  <class name="org.sharp.utils.JGraphUtils" map="T"/>
  <method class="org.sharp.utils.JGraphUtils" name="com.mxgraph.swing.mxGraphComponent helloWorldGraphComponent()" map="A"/>
  <class name="org.sharp.utils.Proxies$1" map="1"/>
  <method class="org.sharp.utils.Proxies$1" name="java.lang.Object intercept(org.apache.commons.proxy.Invocation)" map="intercept"/>
  <class name="org.sharp.utils.Proxies$CacheInterceptor" map="_A"/>
  <field class="org.sharp.utils.Proxies$CacheInterceptor" name="map" map="map"/>
  <method class="org.sharp.utils.Proxies$CacheInterceptor" name="java.lang.String obtainKey(java.lang.String, java.lang.Object[])" map="A"/>
  <method class="org.sharp.utils.Proxies$CacheInterceptor" name="java.lang.Object intercept(org.apache.commons.proxy.Invocation)" map="intercept"/>
  <class name="org.sharp.utils.Proxies" map="U"/>
  <field class="org.sharp.utils.Proxies" name="fac" map="A"/>
  <method class="org.sharp.utils.Proxies" name="java.lang.Object cachedCallProxy(java.lang.Object)" map="A"/>
  <method class="org.sharp.utils.Proxies" name="java.lang.Object exceptionLogProxy(java.lang.Object)" map="B"/>
  <class name="org.sharp.utils.SecurityUtils" map="V"/>
  <method class="org.sharp.utils.SecurityUtils" name="java.lang.String genKey(java.lang.String)" map="A"/>
  <method class="org.sharp.utils.SecurityUtils" name="java.lang.String registerNumber()" map="A"/>
  <method class="org.sharp.utils.SecurityUtils" name="boolean checkKey(java.lang.String, java.lang.String)" map="A"/>
  <class name="org.sharp.intf.ContentParser" map="A"/>
  <method class="org.sharp.intf.ContentParser" name="java.io.InputStream contentStream(java.io.File)" map="A"/>
  <class name="org.sharp.intf.AppContext" map="B"/>
  <method class="org.sharp.intf.AppContext" name="java.lang.Object getConfig(java.lang.String, java.lang.Class)" map="A"/>
  <method class="org.sharp.intf.AppContext" name="java.lang.Object requestObject(java.lang.Class)" map="A"/>
  <method class="org.sharp.intf.AppContext" name="void saveConfig(java.lang.String, java.lang.Object)" map="A"/>
  <method class="org.sharp.intf.AppContext" name="void shareObject(java.lang.Object)" map="A"/>
  <method class="org.sharp.intf.AppContext" name="java.lang.String dataDirPath()" map="A"/>
  <class name="org.sharp.intf.AudioPlayer" map="C"/>
  <method class="org.sharp.intf.AudioPlayer" name="void play(java.lang.String)" map="play"/>
  <class name="org.sharp.intf.WebDict" map="D"/>
  <method class="org.sharp.intf.WebDict" name="org.sharp.swing.apps.webdict2.beans.Term lookup(java.lang.String)" map="A"/>
  <class name="org.sharp.intf.ItemSelected" map="E"/>
  <method class="org.sharp.intf.ItemSelected" name="void itemSelected(java.lang.Object)" map="A"/>
  <class name="org.sharp.intf.UI" map="F"/>
  <method class="org.sharp.intf.UI" name="java.awt.Container getUI()" map="A"/>
  <class name="org.sharp.intf.Pluggable$AppLifeCycle" map="_A"/>
  <method class="org.sharp.intf.Pluggable$AppLifeCycle" name="void init(org.sharp.intf.AppContext)" map="A"/>
  <method class="org.sharp.intf.Pluggable$AppLifeCycle" name="void exit()" map="A"/>
  <class name="org.sharp.intf.Pluggable$TabbedUI" map="_B"/>
  <method class="org.sharp.intf.Pluggable$TabbedUI" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.intf.Pluggable$TabbedUI" name="java.lang.String tabDescription()" map="C"/>
  <method class="org.sharp.intf.Pluggable" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.intf.Pluggable" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <class name="org.sharp.intf.FileHandler" map="G"/>
  <method class="org.sharp.intf.FileHandler" name="void setInput(java.io.File)" map="A"/>
  <package name="org.sharp.db" map="C"/>
  <class name="org.sharp.db.DB" map="A"/>
  <field class="org.sharp.db.DB" name="sessionFactory" map="A"/>
  <method class="org.sharp.db.DB" name="org.hibernate.Session session()" map="A"/>
  <class name="org.sharp.db.OrientDB" map="B"/>
  <field class="org.sharp.db.OrientDB" name="db" map="A"/>
  <method class="org.sharp.db.OrientDB" name="com.orientechnologies.orient.core.db.object.ODatabaseObject db()" map="A"/>
  <package name="org.sharp.console" map="D"/>
  <package name="org.sharp.console.cube" map="A"/>
  <class name="org.sharp.console.cube.Cube" map="A"/>
  <method class="org.sharp.console.cube.Cube" name="void main(java.lang.String[])" map="A"/>
  <package name="org.sharp.console.jni" map="B"/>
  <class name="org.sharp.console.jni.Win32" map="A"/>
  <method class="org.sharp.console.jni.Win32" name="void main(java.lang.String[])" map="A"/>
  <method class="org.sharp.console.jni.Win32" name="java.lang.String sayHello(java.lang.String)" map="sayHello"/>
  <method class="org.sharp.console.jni.Win32" name="java.lang.String lnkTarget(java.lang.String)" map="lnkTarget"/>
  <package name="org.sharp.console.gtk" map="C"/>
  <class name="org.sharp.console.gtk.CuteSounder$2" map="2"/>
  <method class="org.sharp.console.gtk.CuteSounder$2" name="boolean onDeleteEvent(org.gnome.gtk.Widget, org.gnome.gdk.Event)" map="onDeleteEvent"/>
  <class name="org.sharp.console.gtk.CuteSounder$1" map="1"/>
  <field class="org.sharp.console.gtk.CuteSounder$1" name="val$b" map="val$b"/>
  <method class="org.sharp.console.gtk.CuteSounder$1" name="void onClicked(org.gnome.gtk.Button)" map="onClicked"/>
  <class name="org.sharp.console.gtk.CuteSounder" map="A"/>
  <method class="org.sharp.console.gtk.CuteSounder" name="void main(java.lang.String[])" map="A"/>
  <class name="org.sharp.swing.ui.ClosableTab$2" map="2"/>
  <method class="org.sharp.swing.ui.ClosableTab$2" name="void mouseExited(java.awt.event.MouseEvent)" map="mouseExited"/>
  <method class="org.sharp.swing.ui.ClosableTab$2" name="void mouseEntered(java.awt.event.MouseEvent)" map="mouseEntered"/>
  <class name="org.sharp.swing.ui.ClosableTab$1" map="1"/>
  <field class="org.sharp.swing.ui.ClosableTab$1" name="this$0" map="A"/>
  <field class="org.sharp.swing.ui.ClosableTab$1" name="val$pane" map="B"/>
  <method class="org.sharp.swing.ui.ClosableTab$1" name="java.lang.String getText()" map="getText"/>
  <class name="org.sharp.swing.ui.ClosableTab$TabButton" map="_A"/>
  <field class="org.sharp.swing.ui.ClosableTab$TabButton" name="this$0" map="A"/>
  <method class="org.sharp.swing.ui.ClosableTab$TabButton" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="org.sharp.swing.ui.ClosableTab$TabButton" name="void updateUI()" map="updateUI"/>
  <method class="org.sharp.swing.ui.ClosableTab$TabButton" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.ui.ClosableTab" map="A"/>
  <field class="org.sharp.swing.ui.ClosableTab" name="buttonMouseListener" map="A"/>
  <field class="org.sharp.swing.ui.ClosableTab" name="pane" map="B"/>
  <field class="org.sharp.swing.ui.ClosableTab" name="serialVersionUID" map="C"/>
  <method class="org.sharp.swing.ui.ClosableTab" name="java.awt.event.MouseListener access$000()" map="A"/>
  <method class="org.sharp.swing.ui.ClosableTab" name="javax.swing.JTabbedPane access$100(org.sharp.swing.ui.ClosableTab)" map="A"/>
  <class name="org.sharp.swing.ui.LogUi$1" map="1"/>
  <field class="org.sharp.swing.ui.LogUi$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.ui.LogUi$1" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.swing.ui.LogUi$1" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.ui.LogUi$1" name="java.lang.String tabDescription()" map="C"/>
  <field class="org.sharp.swing.ui.LogUi" name="sp" map="A"/>
  <method class="org.sharp.swing.ui.LogUi" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.ui.LogUi" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <method class="org.sharp.swing.ui.LogUi" name="javax.swing.JScrollPane access$000(org.sharp.swing.ui.LogUi)" map="A"/>
  <class name="org.sharp.swing.ui.TrayUtils" map="B"/>
  <field class="org.sharp.swing.ui.TrayUtils" name="tray" map="A"/>
  <field class="org.sharp.swing.ui.TrayUtils" name="trayIcon" map="B"/>
  <method class="org.sharp.swing.ui.TrayUtils" name="java.awt.Image createImage(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.ui.TrayUtils" name="void message(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.ui.TrayUtils" name="void trayIcon(java.lang.String, java.lang.String)" map="B"/>
  <class name="org.sharp.swing.ui.BeanUiUtils$2$2" map="2"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$2" name="java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)" map="getTableCellRendererComponent"/>
  <class name="org.sharp.swing.ui.BeanUiUtils$2$1" map="1"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$1" name="this$0" map="A"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$1" name="rown" map="B"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$1" name="val$value" map="C"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$1" name="editorComponent" map="D"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$1" name="val$row" map="E"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$1" name="val$column" map="F"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2$1" name="columnn" map="G"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="void cancelCellEditing()" map="cancelCellEditing"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="boolean shouldSelectCell(java.util.EventObject)" map="shouldSelectCell"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="java.awt.Component getTableCellEditorComponent(javax.swing.JTable, java.lang.Object, boolean, int, int)" map="getTableCellEditorComponent"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="boolean stopCellEditing()" map="stopCellEditing"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="void removeCellEditorListener(javax.swing.event.CellEditorListener)" map="removeCellEditorListener"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="void addCellEditorListener(javax.swing.event.CellEditorListener)" map="addCellEditorListener"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="boolean isCellEditable(java.util.EventObject)" map="isCellEditable"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2$1" name="java.lang.Object getCellEditorValue()" map="getCellEditorValue"/>
  <class name="org.sharp.swing.ui.BeanUiUtils$2" map="2"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$2" name="serialVersionUID" map="A"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2" name="javax.swing.table.TableCellEditor getCellEditor(int, int)" map="getCellEditor"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$2" name="javax.swing.table.TableCellRenderer getCellRenderer(int, int)" map="getCellRenderer"/>
  <class name="org.sharp.swing.ui.BeanUiUtils$1" map="1"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$1" name="val$obj" map="A"/>
  <field class="org.sharp.swing.ui.BeanUiUtils$1" name="val$pName" map="B"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$1" name="java.lang.String propertyName()" map="A"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$1" name="java.lang.Object object()" map="B"/>
  <class name="org.sharp.swing.ui.BeanUiUtils$TableCellData" map="_A"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$TableCellData" name="java.lang.String propertyName()" map="A"/>
  <method class="org.sharp.swing.ui.BeanUiUtils$TableCellData" name="java.lang.Object object()" map="B"/>
  <class name="org.sharp.swing.ui.BeanUiUtils" map="C"/>
  <method class="org.sharp.swing.ui.BeanUiUtils" name="javax.swing.JTable tableUi(java.lang.Object)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$FocusLostHandler" map="_A"/>
  <method class="org.sharp.swing.ui.SwingUtils$FocusLostHandler" name="void focusLost(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JRadioGroup" map="_B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JRadioGroup" name="void setSelected(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JRadioGroup" name="javax.swing.JPanel jPanel()" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JListItemClickListener" map="_C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JListItemClickListener" name="void clicked(java.lang.Integer)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$NewIntegerHandler" map="_D"/>
  <method class="org.sharp.swing.ui.SwingUtils$NewIntegerHandler" name="void newInt(int)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX" map="_A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX" name="int defaultSortColumn()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX" name="java.lang.Integer[] columnWidths()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX" name="boolean defaultAsc()" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX" name="java.lang.Object[] columnValues(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX" name="java.lang.String[] columnNames()" map="D"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX$1" map="1"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX$1" name="java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)" map="getTableCellRendererComponent"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX" map="_B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX" name="headerRender" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX" name="void set(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX" name="javax.swing.table.TableColumn[] getColumns()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX" name="int getRowCount()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX" name="java.lang.Object getValueAt(int, int)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" map="5"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="val$newJTableModelX" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="val$newJTableSortingSupport" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="val$table" map="C"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="dataL" map="D"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="val$jsp" map="E"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="void set(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX, javax.swing.TransferHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="javax.swing.JScrollPane jScrollPane()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="void sort()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="java.util.List data()" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="void set(java.lang.Boolean, javax.swing.DropMode, javax.swing.TransferHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$5" name="javax.swing.JTable jTable()" map="D"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$4" map="4"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$4" name="val$ss" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$4" name="val$table" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$4" name="val$tmx" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$4" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3$1" map="1"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3$1" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" map="3"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="cs_" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="sortCol" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="val$cs" map="C"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="sortAsc" map="D"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="val$data" map="E"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="reorderingAllowed" map="F"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="data_" map="G"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="void set(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="javax.swing.Icon getColumnIcon(int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="boolean reorderingAllowed()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="boolean reverseOrder()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="void sortData()" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="void setSortCol(int)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$3" name="int sortCol()" map="D"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" map="2"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="cs_" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="val$cs" map="C"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="val$data" map="D"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="cols" map="E"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="data_" map="F"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="void set(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="javax.swing.table.TableColumn[] getColumns()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="int getRowCount()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$2" name="java.lang.Object getValueAt(int, int)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$1" map="1"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$1" name="val$tm" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$1" name="int getColumnCount()" map="getColumnCount"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$1" name="int getRowCount()" map="getRowCount"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$1" name="java.lang.Object getValueAt(int, int)" map="getValueAt"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" map="_C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" name="void set(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" name="javax.swing.Icon getColumnIcon(int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" name="boolean reverseOrder()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" name="boolean reorderingAllowed()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" name="void sortData()" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" name="void setSortCol(int)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport" name="int sortCol()" map="D"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler" map="_D"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler" name="void set(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX, javax.swing.TransferHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler" name="javax.swing.JScrollPane jScrollPane()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler" name="void sort()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler" name="java.util.List data()" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler" name="void set(java.lang.Boolean, javax.swing.DropMode, javax.swing.TransferHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler" name="javax.swing.JTable jTable()" map="D"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtilsX" map="_E"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="java.awt.event.MouseAdapter newJTableModelXMouseListener(javax.swing.JTable, org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport, org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler newJTable(org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX, java.lang.Integer, javax.swing.event.ListSelectionListener)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler newJTable(org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="javax.swing.table.AbstractTableModel access$000(org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="javax.swing.table.AbstractTableModel newAbstractTableModel(org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX newJTableModelX(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport newJTableSortingSupport(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler newJTable(javax.swing.JScrollPane, java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX, java.lang.Integer, java.lang.Integer, javax.swing.event.ListSelectionListener, java.lang.Boolean, javax.swing.DropMode, javax.swing.TransferHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtilsX" name="javax.swing.JTable newJTable(org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableModelX, org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableSortingSupport)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$TextPaneHandler" map="_F"/>
  <method class="org.sharp.swing.ui.SwingUtils$TextPaneHandler" name="javax.swing.JTextPane jTextPane()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$TextPaneHandler" name="void setText(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$12" map="12"/>
  <field class="org.sharp.swing.ui.SwingUtils$12" name="val$comp" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$12" name="void focusGained(java.awt.event.FocusEvent)" map="focusGained"/>
  <method class="org.sharp.swing.ui.SwingUtils$12" name="void focusLost(java.awt.event.FocusEvent)" map="focusLost"/>
  <class name="org.sharp.swing.ui.SwingUtils$11" map="11"/>
  <field class="org.sharp.swing.ui.SwingUtils$11" name="val$autoClear" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$11" name="val$tf" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$11" name="val$flh" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$11" name="void focusGained(java.awt.event.FocusEvent)" map="focusGained"/>
  <method class="org.sharp.swing.ui.SwingUtils$11" name="void focusLost(java.awt.event.FocusEvent)" map="focusLost"/>
  <class name="org.sharp.swing.ui.SwingUtils$10" map="10"/>
  <field class="org.sharp.swing.ui.SwingUtils$10" name="val$iconPath" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$10" name="java.awt.Component getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean)" map="getListCellRendererComponent"/>
  <class name="org.sharp.swing.ui.SwingUtils$DnDSupport" map="_G"/>
  <method class="org.sharp.swing.ui.SwingUtils$DnDSupport" name="void droppedOn(java.lang.Object, java.util.List)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$9" map="9"/>
  <field class="org.sharp.swing.ui.SwingUtils$9" name="val$jtp" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$9" name="javax.swing.JTextPane jTextPane()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$9" name="void setText(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$8" map="8"/>
  <field class="org.sharp.swing.ui.SwingUtils$8" name="val$ktl" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$8" name="val$jta" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$8" name="void keyPressed(java.awt.event.KeyEvent)" map="keyPressed"/>
  <method class="org.sharp.swing.ui.SwingUtils$8" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <method class="org.sharp.swing.ui.SwingUtils$8" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="org.sharp.swing.ui.SwingUtils$7" map="7"/>
  <field class="org.sharp.swing.ui.SwingUtils$7" name="val$group" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$7" name="val$panel" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$7" name="void setSelected(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$7" name="javax.swing.JPanel jPanel()" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$6" map="6"/>
  <field class="org.sharp.swing.ui.SwingUtils$6" name="val$jb" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$6" name="val$eh" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.ui.SwingUtils$NewInputHandler" map="_H"/>
  <method class="org.sharp.swing.ui.SwingUtils$NewInputHandler" name="void newInput(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$5" map="5"/>
  <field class="org.sharp.swing.ui.SwingUtils$5" name="val$model" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$5" name="val$spinner" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$5" name="javax.swing.JSpinner jSpinner()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$5" name="void setMax(int)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$SpinnerHandler" map="_I"/>
  <method class="org.sharp.swing.ui.SwingUtils$SpinnerHandler" name="javax.swing.JSpinner jSpinner()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$SpinnerHandler" name="void setMax(int)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$4" map="4"/>
  <field class="org.sharp.swing.ui.SwingUtils$4" name="val$model" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$4" name="val$nih" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$4" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <class name="org.sharp.swing.ui.SwingUtils$3" map="3"/>
  <field class="org.sharp.swing.ui.SwingUtils$3" name="val$jlicl" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$3" name="val$jl" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$3" name="val$jlidcl" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$3" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="org.sharp.swing.ui.SwingUtils$2" map="2"/>
  <field class="org.sharp.swing.ui.SwingUtils$2" name="val$dndS" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$2" name="val$t" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$2" name="val$sc" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$2" name="boolean canImport(javax.swing.TransferHandler$TransferSupport)" map="canImport"/>
  <method class="org.sharp.swing.ui.SwingUtils$2" name="int getSourceActions(javax.swing.JComponent)" map="getSourceActions"/>
  <method class="org.sharp.swing.ui.SwingUtils$2" name="boolean importData(javax.swing.TransferHandler$TransferSupport)" map="importData"/>
  <class name="org.sharp.swing.ui.SwingUtils$1$1" map="1"/>
  <field class="org.sharp.swing.ui.SwingUtils$1$1" name="this$0" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$1$1" name="val$al" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$1$1" name="java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()" map="getTransferDataFlavors"/>
  <method class="org.sharp.swing.ui.SwingUtils$1$1" name="boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor)" map="isDataFlavorSupported"/>
  <method class="org.sharp.swing.ui.SwingUtils$1$1" name="java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor)" map="getTransferData"/>
  <class name="org.sharp.swing.ui.SwingUtils$1" map="1"/>
  <field class="org.sharp.swing.ui.SwingUtils$1" name="val$sc" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$1" name="val$s" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$1" name="void exportDone(javax.swing.JComponent, java.awt.datatransfer.Transferable, int)" map="exportDone"/>
  <method class="org.sharp.swing.ui.SwingUtils$1" name="java.awt.datatransfer.Transferable createTransferable(javax.swing.JComponent)" map="createTransferable"/>
  <method class="org.sharp.swing.ui.SwingUtils$1" name="int getSourceActions(javax.swing.JComponent)" map="getSourceActions"/>
  <class name="org.sharp.swing.ui.SwingUtils$JListItemDblClickListener" map="_J"/>
  <method class="org.sharp.swing.ui.SwingUtils$JListItemDblClickListener" name="void doubleClicked(java.lang.Integer)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$4" map="4"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$4" name="val$ss" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$4" name="val$table" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$4" name="val$tmx" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$4" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$3" map="3"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="sortCol" map="A"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="val$cs" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="sortAsc" map="C"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="val$data" map="D"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="cols" map="E"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="reorderingAllowed" map="F"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="javax.swing.Icon getColumnIcon(int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="boolean reorderingAllowed()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="boolean reverseOrder()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="void sortData()" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="void setSortCol(int)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$3" name="int sortCol()" map="D"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$2" map="2"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$2" name="val$cs" map="B"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$2" name="val$data" map="C"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$2" name="cols" map="D"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$2" name="javax.swing.table.TableColumn[] getColumns()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$2" name="int getRowCount()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$2" name="java.lang.Object getValueAt(int, int)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport" map="_A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport" name="java.lang.String columnName(int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport" name="int columnCount()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport" name="int columnWidth(int)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport" name="java.lang.Object column(java.lang.Object, int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport" name="java.util.Comparator comparator(int, boolean)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport" map="_B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport" name="javax.swing.Icon getColumnIcon(int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport" name="boolean reverseOrder()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport" name="boolean reorderingAllowed()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport" name="void sortData()" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport" name="void setSortCol(int)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport" name="int sortCol()" map="D"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$1" map="1"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$1" name="val$tm" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$1" name="int getColumnCount()" map="getColumnCount"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$1" name="int getRowCount()" map="getRowCount"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$1" name="java.lang.Object getValueAt(int, int)" map="getValueAt"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX$1" map="1"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX$1" name="java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)" map="getTableCellRendererComponent"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX" map="_C"/>
  <field class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX" name="headerRender" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX" name="javax.swing.table.TableColumn[] getColumns()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX" name="int getRowCount()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX" name="java.lang.Object getValueAt(int, int)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils$JTableUtils" map="_K"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport newJTableSortingSupport(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="javax.swing.JTable addJTable(javax.swing.JScrollPane, java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport, java.lang.Integer, java.lang.Integer, javax.swing.event.ListSelectionListener, java.lang.Boolean)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="javax.swing.table.AbstractTableModel access$100(org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX newJTableModelX(java.util.List, org.sharp.swing.ui.SwingUtils$JTableUtils$ColumnsSupport)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="javax.swing.table.AbstractTableModel newAbstractTableModel(org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="javax.swing.JTable newJTable(int, javax.swing.event.ListSelectionListener, int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="javax.swing.JTable newJTable(org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX, org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils$JTableUtils" name="java.awt.event.MouseAdapter newJTableModelXMouseListener(javax.swing.JTable, org.sharp.swing.ui.SwingUtils$JTableUtils$JTableSortingSupport, org.sharp.swing.ui.SwingUtils$JTableUtils$JTableModelX)" map="A"/>
  <class name="org.sharp.swing.ui.SwingUtils" map="D"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="org.jdesktop.swingx.MultiSplitLayout$Node newMutliSplitModel(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JCheckBox newCheckBox(java.lang.String, boolean, java.awt.event.ItemListener)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JList newJList(javax.swing.event.ListSelectionListener, java.lang.Object[], java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, org.sharp.swing.ui.SwingUtils$JListItemDblClickListener, org.sharp.swing.ui.SwingUtils$JListItemClickListener, java.lang.Boolean, javax.swing.DropMode, javax.swing.TransferHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="org.jdesktop.swingx.MultiSplitPane newMutliSplitPane(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.tree.DefaultMutableTreeNode toTreeNode(org.dom4j.Element)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void addKeyListener(java.awt.Component, java.awt.event.KeyAdapter)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.lang.String applyKeyEventOnText(java.awt.event.KeyEvent, java.lang.String, int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void newTabbedPane()" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JLabel newJLabel(java.lang.String, java.lang.String, java.lang.Integer, java.lang.Integer)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="org.sharp.swing.ui.SwingUtils$TextPaneHandler newTextPane(java.lang.String, java.lang.String, boolean)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JTextArea newTextArea(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean, boolean, org.sharp.swing.ui.SwingUtils$NewInputHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="org.sharp.swing.ui.SwingUtils$SpinnerHandler newSpinner(java.lang.Integer, org.sharp.swing.ui.SwingUtils$NewIntegerHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JTextArea newTextArea(java.lang.String, boolean, boolean, boolean, org.sharp.swing.ui.SwingUtils$NewInputHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.awt.Component showSize(java.awt.Component)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JList newJList(javax.swing.event.ListSelectionListener)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.ListCellRenderer newListCellRenderer(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.ImageIcon newImageIcon(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.lang.String pathStr(javax.swing.text.Element)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JList newJList(javax.swing.event.ListSelectionListener, java.lang.Integer, java.lang.Integer)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.lang.String toString(java.util.Stack)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.awt.Component setMinSize(java.awt.Component, int, int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JFileChooser showFileChooseDialog(javax.swing.JFileChooser, boolean, org.sharp.intf.FileHandler, java.awt.Component, java.lang.String, java.lang.Integer, java.lang.Boolean, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JList newJList4Tag(java.lang.Object[], javax.swing.event.ListSelectionListener, org.sharp.swing.ui.SwingUtils$JListItemDblClickListener, org.sharp.swing.ui.SwingUtils$JListItemClickListener, javax.swing.TransferHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void highlightText(javax.swing.text.JTextComponent, int, int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.TransferHandler newJTableTranserHandlerDrop(java.util.List, java.lang.Class, org.sharp.swing.ui.SwingUtils$DnDSupport)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void newSplitPane(int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JTextArea newTextArea(int, int, boolean, boolean)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void scrollTo(javax.swing.JScrollPane, java.lang.Integer, java.lang.Double)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void goRoot(javax.swing.text.Element, java.util.Stack)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="org.sharp.swing.ui.SwingUtils$JRadioGroup newRadioGroup(java.lang.String[], int, org.sharp.intf.ItemSelected)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void openByDesk(java.lang.String)" map="C"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.tree.DefaultTreeModel newDefaultTreeModel(javax.swing.tree.TreeNode, javax.swing.event.TreeModelListener)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JTextField newTextField(java.lang.String, java.lang.Integer, java.lang.Boolean, org.sharp.swing.ui.SwingUtils$FocusLostHandler)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.awt.Component setPreferredSize(java.awt.Component, int, int)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JEditorPane newEditorPane(java.lang.String, java.lang.String, boolean, boolean)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void scrollTo(javax.swing.JScrollPane, java.lang.Integer, int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JTree toJTree(java.lang.String)" map="D"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void beep()" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void saveMutliSplitModel(java.lang.String, org.jdesktop.swingx.MultiSplitLayout$Node)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="void scrollTo(javax.swing.JScrollPane, javax.swing.JTextArea, int)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.tree.TreeModel newXmlTreeModel(javax.swing.event.TreeModelListener)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.awt.event.FocusListener defaultFocusRequester(java.awt.Component)" map="B"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JComboBox newComboBox(java.lang.Object[], int, boolean, java.awt.event.ActionListener)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="java.awt.Font deriveFont(java.awt.Font, float, java.awt.Font)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JButton newButton(java.lang.String, java.awt.event.ActionListener)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JSplitPane newSplitPane(int, java.awt.Component, java.awt.Component)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.TransferHandler newJTableTranserHandlerDrag(java.util.List, java.lang.Class)" map="A"/>
  <method class="org.sharp.swing.ui.SwingUtils" name="javax.swing.JTree newJtree(javax.swing.tree.DefaultTreeModel, javax.swing.event.TreeSelectionListener)" map="A"/>
  <package name="org.sharp.swing.apps.video" map="A"/>
  <class name="org.sharp.swing.apps.video.VideoUi" map="A"/>
  <method class="org.sharp.swing.apps.video.VideoUi" name="java.awt.Container getUI()" map="A"/>
  <class name="org.sharp.swing.apps.txt2lrc.LrcUi$6" map="6"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi$6" name="this$0" map="B"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$6" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$6" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$6" name="java.lang.String tabDescription()" map="C"/>
  <class name="org.sharp.swing.apps.txt2lrc.LrcUi$5" map="5"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi$5" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$5" name="void mouseClicked(java.awt.event.MouseEvent)" map="mouseClicked"/>
  <class name="org.sharp.swing.apps.txt2lrc.LrcUi$4" map="4"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.txt2lrc.LrcUi$3" map="3"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.txt2lrc.LrcUi$2" map="2"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.txt2lrc.LrcUi$1" map="1"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$1" name="void oneSecondPlayed(double)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi$1" name="void endOfMedia(int)" map="A"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="state" map="B"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="fc" map="C"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="play" map="D"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="mp3file" map="E"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="prog" map="F"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="STATE_PAUSED" map="G"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="scrlp" map="H"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="STATE_INITED" map="I"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="STATE_PLAYING" map="J"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="player" map="K"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="text" map="L"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="textfile" map="M"/>
  <field class="org.sharp.swing.apps.txt2lrc.LrcUi" name="t" map="N"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="java.io.File access$802(org.sharp.swing.apps.txt2lrc.LrcUi, java.io.File)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="javax.swing.JPanel getContentPanel()" map="C"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="java.io.File access$702(org.sharp.swing.apps.txt2lrc.LrcUi, java.io.File)" map="B"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="javax.swing.JFileChooser access$600(org.sharp.swing.apps.txt2lrc.LrcUi)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="javax.swing.JLabel access$100(org.sharp.swing.apps.txt2lrc.LrcUi)" map="B"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="java.lang.String access$400(org.sharp.swing.apps.txt2lrc.LrcUi)" map="C"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="void markSentence(double)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="org.sharp.utils.Mp3Player access$000(org.sharp.swing.apps.txt2lrc.LrcUi)" map="D"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="javax.swing.JButton access$300(org.sharp.swing.apps.txt2lrc.LrcUi)" map="E"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="void access$1000(org.sharp.swing.apps.txt2lrc.LrcUi)" map="F"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="void ajustMp3position()" map="D"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="javax.swing.JTextArea access$900(org.sharp.swing.apps.txt2lrc.LrcUi)" map="G"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="java.lang.String access$402(org.sharp.swing.apps.txt2lrc.LrcUi, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="void access$200(org.sharp.swing.apps.txt2lrc.LrcUi, double)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="java.io.File access$700(org.sharp.swing.apps.txt2lrc.LrcUi)" map="H"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="java.awt.Container getUi()" map="E"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="java.io.File access$800(org.sharp.swing.apps.txt2lrc.LrcUi)" map="I"/>
  <method class="org.sharp.swing.apps.txt2lrc.LrcUi" name="javax.swing.JScrollPane access$500(org.sharp.swing.apps.txt2lrc.LrcUi)" map="J"/>
  <class name="org.sharp.swing.apps.txt2lrc.Sentence" map="A"/>
  <field class="org.sharp.swing.apps.txt2lrc.Sentence" name="posindoc" map="A"/>
  <field class="org.sharp.swing.apps.txt2lrc.Sentence" name="doc" map="B"/>
  <field class="org.sharp.swing.apps.txt2lrc.Sentence" name="words" map="C"/>
  <method class="org.sharp.swing.apps.txt2lrc.Sentence" name="java.lang.String[] toPhrases(int)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.Sentence" name="java.lang.String toString()" map="toString"/>
  <class name="org.sharp.swing.apps.txt2lrc.TextDoc" map="B"/>
  <field class="org.sharp.swing.apps.txt2lrc.TextDoc" name="parastart" map="A"/>
  <field class="org.sharp.swing.apps.txt2lrc.TextDoc" name="sentences" map="B"/>
  <field class="org.sharp.swing.apps.txt2lrc.TextDoc" name="streamend" map="C"/>
  <field class="org.sharp.swing.apps.txt2lrc.TextDoc" name="r" map="D"/>
  <field class="org.sharp.swing.apps.txt2lrc.TextDoc" name="paralen" map="E"/>
  <method class="org.sharp.swing.apps.txt2lrc.TextDoc" name="org.sharp.swing.apps.txt2lrc.Sentence[] nextPara()" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.TextDoc" name="java.lang.String format(java.lang.String, int)" map="A"/>
  <method class="org.sharp.swing.apps.txt2lrc.TextDoc" name="java.lang.String nextWord()" map="B"/>
  <method class="org.sharp.swing.apps.txt2lrc.TextDoc" name="boolean hasNextPara()" map="C"/>
  <method class="org.sharp.swing.apps.txt2lrc.TextDoc" name="void sentenceAt(double, org.apache.commons.lang.mutable.MutableInt, org.apache.commons.lang.mutable.MutableInt)" map="A"/>
  <package name="org.sharp.swing.apps.el.utils" map="A"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$9" map="9"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$9" name="int defaultSortColumn()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$9" name="java.lang.Integer[] columnWidths()" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$9" name="boolean defaultAsc()" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$9" name="java.lang.Object[] columnValues(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$9" name="java.lang.String[] columnNames()" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$9" name="java.lang.Object[] columnValues(org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$8" map="8"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$8" name="int defaultSortColumn()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$8" name="java.lang.Integer[] columnWidths()" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$8" name="boolean defaultAsc()" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$8" name="java.lang.Object[] columnValues(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$8" name="java.lang.String[] columnNames()" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$8" name="java.lang.Object[] columnValues(org.sharp.swing.apps.el.beans.NewWord)" map="B"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$7" map="7"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$7" name="int defaultSortColumn()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$7" name="java.lang.Integer[] columnWidths()" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$7" name="boolean defaultAsc()" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$7" name="java.lang.Object[] columnValues(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$7" name="java.lang.String[] columnNames()" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$7" name="java.lang.Object[] columnValues(org.sharp.swing.apps.el.beans.NewWord)" map="C"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$6" map="6"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$6" name="int defaultSortColumn()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$6" name="java.lang.Integer[] columnWidths()" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$6" name="boolean defaultAsc()" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$6" name="java.lang.Object[] columnValues(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$6" name="java.lang.String[] columnNames()" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$6" name="java.lang.Object[] columnValues(org.sharp.swing.apps.el.beans.NewWord)" map="D"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$5" map="5"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$5" name="val$baseDir" map="val$baseDir"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$5" name="val$tag" map="val$tag"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$5" name="void execute(java.lang.Object)" map="execute"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$4" map="4"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$4" name="val$hasNotes" map="val$hasNotes"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$4" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$12" map="12"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$12" name="val$termName" map="val$termName"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$12" name="val$docName" map="val$docName"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$12" name="val$seqNo" map="val$seqNo"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$12" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$3" map="3"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$3" name="val$include" map="val$include"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$3" name="val$tags" map="val$tags"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$3" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$2" map="2"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$2" name="java.lang.Object transform(java.lang.Object)" map="transform"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$11" map="11"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$11" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$10" map="10"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$10" name="val$learnPronun" map="val$learnPronun"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$10" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils$1" map="1"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils$1" name="val$docName" map="val$docName"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils$1" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.utils.NewWordsUtils" map="A"/>
  <field class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="NEWWORDS_DIRNAME" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List filterWords(java.util.List, java.lang.String[], boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List loadWords(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="void saveWord(java.lang.String, org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List filterWords(java.util.List, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List genWords(java.util.List, org.sharp.swing.apps.el.beans.Phrase[], java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="boolean access$000(org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List filterIndexableNewWords(java.util.List)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX addTagView()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="boolean newWordSaveable(org.sharp.swing.apps.el.beans.NewWord)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX fullView()" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="boolean isNewWordIndexable(org.sharp.swing.apps.el.beans.NewWord)" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.lang.String newWordIndexId(org.sharp.swing.apps.el.beans.NewWord)" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="boolean removeWord(java.lang.String, org.sharp.swing.apps.el.beans.NewWord)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX briefView()" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="org.sharp.swing.apps.el.beans.NewWord loadWord(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.lang.String partOfSpeechAbbre(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="org.sharp.swing.apps.el.beans.NewWord findNewWordByIndexId(java.util.List, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.lang.String newWordSavedPath(org.sharp.swing.apps.el.beans.NewWord)" map="E"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX searchResultView()" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.lang.String[] docNames(java.util.List)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="void removeOldWords(java.lang.String)" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List filterWords(java.util.List, java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List migrateWords(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="boolean sameEntry(org.sharp.swing.apps.el.beans.NewWord, org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="java.util.List filterWordsWithPronun(java.util.List, boolean)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.NewWordsUtils" name="void removeWordsTag(java.lang.String, java.util.List, java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.utils.PhrasesUtils$2" map="2"/>
  <field class="org.sharp.swing.apps.el.utils.PhrasesUtils$2" name="val$include" map="val$include"/>
  <field class="org.sharp.swing.apps.el.utils.PhrasesUtils$2" name="val$tags" map="val$tags"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils$2" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.utils.PhrasesUtils$1" map="1"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils$1" name="int defaultSortColumn()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils$1" name="java.lang.Integer[] columnWidths()" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils$1" name="boolean defaultAsc()" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils$1" name="java.lang.Object[] columnValues(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils$1" name="java.lang.String[] columnNames()" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils$1" name="java.lang.Object[] columnValues(org.sharp.swing.apps.el.beans.Phrase)" map="A"/>
  <class name="org.sharp.swing.apps.el.utils.PhrasesUtils" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils" name="void addTag(org.sharp.swing.apps.el.beans.Phrase, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils" name="void removeTag(org.sharp.swing.apps.el.beans.Phrase[], java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX briefView()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils" name="java.util.List filterWords(java.util.List, java.lang.String[], boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.PhrasesUtils" name="void removeTag(org.sharp.swing.apps.el.beans.Phrase, java.lang.String)" map="B"/>
  <class name="org.sharp.swing.apps.el.utils.TermUtils$2" map="2"/>
  <field class="org.sharp.swing.apps.el.utils.TermUtils$2" name="val$selectedPos" map="val$selectedPos"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils$2" name="java.lang.Boolean f(org.sharp.swing.apps.webdict2.beans.PartOfSpeech)" map="f"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils$2" name="java.lang.Object f(java.lang.Object)" map="f"/>
  <class name="org.sharp.swing.apps.el.utils.TermUtils$1" map="1"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils$1" name="java.lang.Object f(java.lang.Object)" map="f"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils$1" name="java.lang.String f(org.sharp.swing.apps.webdict2.beans.PartOfSpeech)" map="f"/>
  <class name="org.sharp.swing.apps.el.utils.TermUtils" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils" name="org.sharp.swing.apps.webdict2.beans.Meaning meaning(org.sharp.swing.apps.webdict2.beans.PartOfSpeech, int, org.sharp.swing.apps.webdict2.beans.Meaning)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils" name="int meaningsCount(org.sharp.swing.apps.webdict2.beans.PartOfSpeech)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils" name="org.sharp.swing.apps.webdict2.beans.PartOfSpeech partOfSpeech(org.sharp.swing.apps.webdict2.beans.Term, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.TermUtils" name="java.lang.String[] partOfSpeeches(org.sharp.swing.apps.webdict2.beans.Term)" map="A"/>
  <class name="org.sharp.swing.apps.el.utils.TagUtils" map="D"/>
  <class name="org.sharp.swing.apps.el.utils.ArticleUtils$2" map="2"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils$2" name="java.lang.Object transform(java.lang.Object)" map="transform"/>
  <class name="org.sharp.swing.apps.el.utils.ArticleUtils$1" map="1"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils$1" name="int defaultSortColumn()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils$1" name="java.lang.Integer[] columnWidths()" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils$1" name="boolean defaultAsc()" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils$1" name="java.lang.Object[] columnValues(org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils$1" name="java.lang.Object[] columnValues(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils$1" name="java.lang.String[] columnNames()" map="D"/>
  <class name="org.sharp.swing.apps.el.utils.ArticleUtils" map="E"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="void convert(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="org.sharp.swing.apps.el.beans.Article loadArticle(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String findMatchedArticleDir(java.lang.String, java.lang.String)" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="org.sharp.swing.apps.el.beans.Article saveArticle(java.lang.String, org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String genRelativeFilePath(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String docName(org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String getMaskedArticleText(org.sharp.swing.apps.el.beans.Article, boolean, boolean, boolean, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="org.sharp.swing.apps.el.beans.Article saveArticle(java.lang.String, java.util.List, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.util.List loadArticles(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.util.List getPhrases(org.sharp.swing.apps.el.beans.Article, boolean, boolean, boolean, boolean, boolean, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$ColumnsSupportX fullView()" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="void copyPhrasesProperties(org.sharp.swing.apps.el.beans.Article, org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String normalizeDocName(java.lang.String)" map="C"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String docName(java.lang.String)" map="D"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String articleFileName(java.lang.String)" map="E"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="void fillArticle(java.lang.String, org.sharp.swing.apps.el.beans.Article)" map="B"/>
  <method class="org.sharp.swing.apps.el.utils.ArticleUtils" name="java.lang.String articleFileNamex(java.lang.String)" map="F"/>
  <package name="org.sharp.swing.apps.el.ui" map="B"/>
  <package name="org.sharp.swing.apps.el.ui.widget" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TermNavPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TermNavPanel$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel$2" name="void newInt(int)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TermNavPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TermNavPanel$1" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TermNavPanel$1" name="val$t" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel$1" name="void itemSelected(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel$1" name="void itemSelected(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TermNavPanel" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="sph" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="meaning" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="nch" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="pos" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="org.sharp.swing.apps.webdict2.beans.PartOfSpeech access$002(org.sharp.swing.apps.el.ui.widget.TermNavPanel, org.sharp.swing.apps.webdict2.beans.PartOfSpeech)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="org.sharp.swing.ui.SwingUtils$SpinnerHandler access$100(org.sharp.swing.apps.el.ui.widget.TermNavPanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="void setTerm(org.sharp.swing.apps.webdict2.beans.Term)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="org.sharp.swing.apps.webdict2.beans.Meaning access$300(org.sharp.swing.apps.el.ui.widget.TermNavPanel)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="org.sharp.swing.apps.webdict2.beans.PartOfSpeech access$000(org.sharp.swing.apps.el.ui.widget.TermNavPanel)" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="org.sharp.swing.apps.webdict2.beans.Meaning access$302(org.sharp.swing.apps.el.ui.widget.TermNavPanel, org.sharp.swing.apps.webdict2.beans.Meaning)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TermNavPanel" name="org.sharp.swing.ui.SwingUtils$NewInputHandler access$200(org.sharp.swing.apps.el.ui.widget.TermNavPanel)" map="D"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInputPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInputPanel$2" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInputPanel$2" name="val$nih" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInputPanel$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInputPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInputPanel$1" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInputPanel$1" name="val$nih" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInputPanel$1" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInputPanel" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInputPanel" name="newInput" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInputPanel" name="keywordBox" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInputPanel" name="title" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInputPanel" name="javax.swing.JTextField access$000(org.sharp.swing.apps.el.ui.widget.WordInputPanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInputPanel" name="java.lang.String newInput()" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$4" map="4"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$4" name="void newInput(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$3" name="void itemStateChanged(java.awt.event.ItemEvent)" map="itemStateChanged"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$2" name="this$0" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$2" name="void itemSelected(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$2" name="void itemSelected(java.lang.String)" map="B"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel$1" name="void focusLost(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="pron" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="nwh" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="nw" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="termName" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="notes" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="newWord" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="docName" map="G"/>
  <field class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="partOfSpeechCP" map="H"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="javax.swing.JCheckBox access$200(org.sharp.swing.apps.el.ui.widget.WordInfoPanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="void showWord(org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="org.sharp.swing.apps.el.beans.NewWord access$000(org.sharp.swing.apps.el.ui.widget.WordInfoPanel)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.WordInfoPanel" name="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler access$100(org.sharp.swing.apps.el.ui.widget.WordInfoPanel)" map="C"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TagListPanel$4" map="4"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$4" name="void doubleClicked(java.lang.Integer)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TagListPanel$3$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3$1" name="val$value" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3$1" name="this$1" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3$1" name="java.awt.datatransfer.DataFlavor[] getTransferDataFlavors()" map="getTransferDataFlavors"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3$1" name="boolean isDataFlavorSupported(java.awt.datatransfer.DataFlavor)" map="isDataFlavorSupported"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3$1" name="java.lang.Object getTransferData(java.awt.datatransfer.DataFlavor)" map="getTransferData"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TagListPanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3" name="void exportDone(javax.swing.JComponent, java.awt.datatransfer.Transferable, int)" map="exportDone"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3" name="java.awt.datatransfer.Transferable createTransferable(javax.swing.JComponent)" map="createTransferable"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3" name="boolean canImport(javax.swing.TransferHandler$TransferSupport)" map="canImport"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3" name="int getSourceActions(javax.swing.JComponent)" map="getSourceActions"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$3" name="boolean importData(javax.swing.TransferHandler$TransferSupport)" map="importData"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TagListPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$2" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TagListPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TagListPanel$TagEventHandler" map="_A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$TagEventHandler" name="void tagDelete(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$TagEventHandler" name="void dataDropOnTag(java.lang.Object, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel$TagEventHandler" name="void tagSwitched(java.lang.String)" map="B"/>
  <class name="org.sharp.swing.apps.el.ui.widget.TagListPanel" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="th" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="tagListTransferHandler" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="tagNameTF" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="rt" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="opened" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="jl" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="teh" map="G"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="clazz" map="H"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="dcl" map="I"/>
  <field class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="tag" map="J"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="org.sharp.swing.apps.el.beans.Tag access$000(org.sharp.swing.apps.el.ui.widget.TagListPanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="void access$100(org.sharp.swing.apps.el.ui.widget.TagListPanel, org.sharp.swing.apps.el.beans.Tag)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="org.sharp.swing.apps.el.beans.Tag tag()" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="java.lang.Class access$500(org.sharp.swing.apps.el.ui.widget.TagListPanel)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="void showRootTag(org.sharp.swing.apps.el.beans.Tag)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="org.sharp.swing.apps.el.ui.widget.TagListPanel$TagEventHandler access$600(org.sharp.swing.apps.el.ui.widget.TagListPanel)" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="void showTag(org.sharp.swing.apps.el.beans.Tag)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="org.sharp.swing.apps.el.beans.Tag access$300(org.sharp.swing.apps.el.ui.widget.TagListPanel)" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="java.util.Stack access$700(org.sharp.swing.apps.el.ui.widget.TagListPanel)" map="E"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="void access$400(org.sharp.swing.apps.el.ui.widget.TagListPanel, org.sharp.swing.apps.el.beans.Tag)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="void deleteChildTag(org.sharp.swing.apps.el.beans.Tag)" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.widget.TagListPanel" name="org.sharp.swing.apps.el.DocReaderApp$Runtime$TagHandler access$200(org.sharp.swing.apps.el.ui.widget.TagListPanel)" map="F"/>
  <class name="org.sharp.swing.apps.el.ui.WordTagsPanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel$3" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="org.sharp.swing.apps.el.ui.WordTagsPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel$2" name="void dataDropOnTag(java.util.List, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel$2" name="void tagDelete(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel$2" name="void dataDropOnTag(java.lang.Object, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel$2" name="void tagSwitched(java.lang.String)" map="B"/>
  <class name="org.sharp.swing.apps.el.ui.WordTagsPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel$1" name="void keyReleased(java.awt.event.KeyEvent)" map="keyReleased"/>
  <class name="org.sharp.swing.apps.el.ui.WordTagsPanel" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="wt" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="tagWords" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="tl" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="noTagWords" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="words" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="newWordHandler" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="twt" map="G"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="javax.swing.JPanel contentPanel(org.sharp.swing.apps.el.beans.Tag, org.sharp.swing.apps.el.DocReaderApp$Runtime$TagHandler)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="void access$300(org.sharp.swing.apps.el.ui.WordTagsPanel, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="org.sharp.swing.apps.el.ui.widget.TagListPanel access$200(org.sharp.swing.apps.el.ui.WordTagsPanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="void freshWordTable(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="javax.swing.JPanel controlPanel()" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="java.util.List access$400(org.sharp.swing.apps.el.ui.WordTagsPanel)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="java.util.List access$000(org.sharp.swing.apps.el.ui.WordTagsPanel)" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.WordTagsPanel" name="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler access$100(org.sharp.swing.apps.el.ui.WordTagsPanel)" map="D"/>
  <class name="org.sharp.swing.apps.el.ui.OxfordA7Panel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.OxfordA7Panel$2" name="this$0" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.OxfordA7Panel$2" name="void newInput(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.OxfordA7Panel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.OxfordA7Panel$1" name="this$0" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.OxfordA7Panel$1" name="void newInput(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.OxfordA7Panel" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.OxfordA7Panel" name="termNavPanel" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.OxfordA7Panel" name="expl" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.OxfordA7Panel" name="dict" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.OxfordA7Panel" name="org.sharp.swing.ui.SwingUtils$TextPaneHandler access$100(org.sharp.swing.apps.el.ui.OxfordA7Panel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.OxfordA7Panel" name="org.sharp.swing.apps.el.ui.widget.TermNavPanel access$000(org.sharp.swing.apps.el.ui.OxfordA7Panel)" map="B"/>
  <class name="org.sharp.swing.apps.el.ui.DocSearchPanel$4" map="4"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel$4" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="org.sharp.swing.apps.el.ui.DocSearchPanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel$3" name="java.awt.Component getListCellRendererComponent(javax.swing.JList, java.lang.String, int, boolean, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel$3" name="java.awt.Component getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean)" map="getListCellRendererComponent"/>
  <class name="org.sharp.swing.apps.el.ui.DocSearchPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel$2" name="void valueChanged(javax.swing.event.ListSelectionEvent)" map="valueChanged"/>
  <class name="org.sharp.swing.apps.el.ui.DocSearchPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel$1" name="this$0" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel$1" name="val$se" map="E"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel$1" name="void newInput(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.DocSearchPanel" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel" name="matchedFragments" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel" name="hitsDocs" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel" name="keyWordPanel" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.DocSearchPanel" name="fileHandler" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel" name="void access$000(org.sharp.swing.apps.el.ui.DocSearchPanel, int)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel" name="void searchResultItemSelected(int)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocSearchPanel" name="void fillSearchResult(org.sharp.utils.Lucene$SearchResult)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.ConfigPanel$4" map="4"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$4" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$4" name="val$admin" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.ConfigPanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$3" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$3" name="val$admin" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.ConfigPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$2" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$2" name="val$admin" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.ConfigPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$1" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel$1" name="val$admin" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.ConfigPanel$AdminHandler" map="_A"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$AdminHandler" name="void clearLuceneIndex()" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$AdminHandler" name="void removeOldWords()" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$AdminHandler" name="void importWords()" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel$AdminHandler" name="void indexNewWords()" map="D"/>
  <class name="org.sharp.swing.apps.el.ui.ConfigPanel" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.ConfigPanel" name="status" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.ConfigPanel" name="javax.swing.JLabel access$000(org.sharp.swing.apps.el.ui.ConfigPanel)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.HtmlArticlePanel$5" map="5"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$5" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.HtmlArticlePanel$4$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$4$1" name="this$1" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$4$1" name="void setInput(java.io.File)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.HtmlArticlePanel$4" map="4"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.HtmlArticlePanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.HtmlArticlePanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.HtmlArticlePanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel$1" name="void caretUpdate(javax.swing.event.CaretEvent)" map="caretUpdate"/>
  <class name="org.sharp.swing.apps.el.ui.HtmlArticlePanel" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="jtextPane" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="jfc" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="jBsavAs" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="jBctc" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="jBshowRaw" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="fileInEdit" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="jBsav" map="G"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="editorKit" map="H"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="doc" map="I"/>
  <field class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="msgLabel" map="J"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="void showText(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="javax.swing.JEditorPane editorPane()" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="javax.swing.JPanel controlPanel()" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="void showRaw()" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="void saveHtml(java.io.File)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="void access$200(org.sharp.swing.apps.el.ui.HtmlArticlePanel, java.io.File)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="javax.swing.text.StyledDocument access$000(org.sharp.swing.apps.el.ui.HtmlArticlePanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="java.io.File access$100(org.sharp.swing.apps.el.ui.HtmlArticlePanel)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="java.awt.Component statusPanel()" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.HtmlArticlePanel" name="javax.swing.text.html.HTMLEditorKit access$300(org.sharp.swing.apps.el.ui.HtmlArticlePanel)" map="C"/>
  <class name="org.sharp.swing.apps.el.ui.DocNewWordsPanel$4" map="4"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.DocNewWordsPanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$3" name="void itemStateChanged(java.awt.event.ItemEvent)" map="itemStateChanged"/>
  <class name="org.sharp.swing.apps.el.ui.DocNewWordsPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$2" name="this$0" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$2" name="val$se" map="G"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$2" name="void newInput(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.DocNewWordsPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$1" name="void valueChanged(javax.swing.event.ListSelectionEvent)" map="valueChanged"/>
  <class name="org.sharp.swing.apps.el.ui.DocNewWordsPanel$WordListGenerator" map="_A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$WordListGenerator" name="java.util.List wordsWithDocName(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$WordListGenerator" name="java.lang.String[] docNames()" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel$WordListGenerator" name="java.util.List pronunWords()" map="B"/>
  <class name="org.sharp.swing.apps.el.ui.DocNewWordsPanel" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="wordInputPanel" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="docsCB" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="pron" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="serialVersionUID" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="fpsFetcher" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="recentFilesCB" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="aph" map="G"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="pronouncer" map="H"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="fileHandler" map="I"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="article" map="J"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="wlg" map="K"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="wordTable" map="L"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="nwsSearched" map="M"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="text" map="N"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="wordPanel" map="O"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="newWords" map="P"/>
  <field class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="nwh" map="Q"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="void fillSearchResult(org.sharp.utils.Lucene$SearchResult)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="void showText(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="javax.swing.JPanel controlPanel(org.sharp.swing.apps.el.DocReaderApp$Runtime$LuceneSearch)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="org.sharp.swing.apps.el.DocReaderApp$Runtime$VoicePronouncer access$000(org.sharp.swing.apps.el.ui.DocNewWordsPanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="java.lang.String articleText(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="java.util.List access$300(org.sharp.swing.apps.el.ui.DocNewWordsPanel)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="org.sharp.swing.apps.el.ui.DocNewWordsPanel$WordListGenerator access$500(org.sharp.swing.apps.el.ui.DocNewWordsPanel)" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="void fillNewWords(java.util.List, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="javax.swing.JCheckBox access$400(org.sharp.swing.apps.el.ui.DocNewWordsPanel)" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="java.lang.String access$100(org.sharp.swing.apps.el.ui.DocNewWordsPanel, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocNewWordsPanel" name="void access$200(org.sharp.swing.apps.el.ui.DocNewWordsPanel, java.lang.String)" map="B"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$6" map="6"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$6" name="this$0" map="H"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$6" name="void newInput(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" map="_A"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="adv" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="adj" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="newwords" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="all" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="verb" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="noun" map="G"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$PhraseTypes" name="void set(boolean, boolean, boolean, boolean, boolean, boolean)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$5" map="5"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$5" name="this$0" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$5" name="void itemSelected(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$5" name="void itemSelected(java.lang.String)" map="C"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$4" map="4"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$3" map="3"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$3" name="this$0" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$3" name="void dataDropOnTag(java.util.List, java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$3" name="void tagDelete(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$3" name="void dataDropOnTag(java.lang.Object, java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$3" name="void tagSwitched(java.lang.String)" map="B"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$2" map="2"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$2" name="void valueChanged(javax.swing.event.ListSelectionEvent)" map="valueChanged"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$1" name="void clicked(java.lang.Integer)" map="A"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel$7" map="7"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$7" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$7" name="void focusGained(java.awt.event.FocusEvent)" map="focusGained"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel$7" name="void focusLost(java.awt.event.FocusEvent)" map="focusLost"/>
  <class name="org.sharp.swing.apps.el.ui.DocPhrasesPanel" map="G"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="serialVersionUID" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="phrases" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="phrase" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="jlicl" map="D"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="articleHandler" map="E"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="fpsFetcher" map="F"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="pth" map="G"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="recentFilesCB" map="H"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="articleSP" map="I"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="notes" map="J"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="arti" map="K"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="article" map="L"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="fileHandler" map="M"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="tlp" map="N"/>
  <field class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="pt" map="O"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="javax.swing.JPanel phraseInfoPanel()" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="org.sharp.intf.FileHandler access$1000(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="void fillArticle(org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="org.sharp.swing.apps.el.beans.Article access$800(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="void updateNewFileItem(org.sharp.swing.apps.beans.RecentItems$Item)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="org.sharp.swing.apps.el.beans.Phrase access$602(org.sharp.swing.apps.el.ui.DocPhrasesPanel, org.sharp.swing.apps.el.beans.Phrase)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="javax.swing.JPanel controlPanel()" map="B"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="java.util.List access$202(org.sharp.swing.apps.el.ui.DocPhrasesPanel, java.util.List)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="java.util.List access$200(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="org.sharp.swing.apps.el.ui.widget.TagListPanel access$100(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="javax.swing.JScrollPane access$700(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="E"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="org.sharp.swing.ui.SwingUtils$JTableUtilsX$JTableHandler access$500(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="F"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="org.sharp.swing.apps.el.DocReaderApp$Runtime$ArticlePersistHandler access$900(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="G"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="void freshPhrasesData(boolean, boolean, boolean, boolean, boolean, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="void access$300(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="H"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="void access$000(org.sharp.swing.apps.el.ui.DocPhrasesPanel, boolean, boolean, boolean, boolean, boolean, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="org.sharp.swing.apps.el.beans.Phrase access$600(org.sharp.swing.apps.el.ui.DocPhrasesPanel)" map="I"/>
  <method class="org.sharp.swing.apps.el.ui.DocPhrasesPanel" name="void freshPhrasesTable()" map="C"/>
  <class name="org.sharp.swing.apps.el.ui.FileChoosePanel$1" map="1"/>
  <field class="org.sharp.swing.apps.el.ui.FileChoosePanel$1" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.FileChoosePanel$1" name="val$currentDir" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.FileChoosePanel$1" name="val$parent" map="C"/>
  <field class="org.sharp.swing.apps.el.ui.FileChoosePanel$1" name="val$fh" map="D"/>
  <method class="org.sharp.swing.apps.el.ui.FileChoosePanel$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.el.ui.FileChoosePanel" map="H"/>
  <field class="org.sharp.swing.apps.el.ui.FileChoosePanel" name="fileLocation" map="A"/>
  <field class="org.sharp.swing.apps.el.ui.FileChoosePanel" name="fc" map="B"/>
  <field class="org.sharp.swing.apps.el.ui.FileChoosePanel" name="btnChooseFile" map="C"/>
  <method class="org.sharp.swing.apps.el.ui.FileChoosePanel" name="void access$000(org.sharp.swing.apps.el.ui.FileChoosePanel, java.awt.Component, org.sharp.intf.FileHandler, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.ui.FileChoosePanel" name="void showFcDialog(java.awt.Component, org.sharp.intf.FileHandler, java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$2$1" map="1"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$2$1" name="val$tabbedPane" map="A"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$2$1" name="this$1" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$2$1" name="void stateChanged(javax.swing.event.ChangeEvent)" map="stateChanged"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$2" map="2"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$2" name="this$0" map="C"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$2" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$2" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$2" name="java.lang.String tabDescription()" map="C"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" map="_A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" name="org.sharp.swing.apps.el.beans.NewWord findNewWordByIndexId(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" name="boolean removeWord(org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" name="void saveWord(org.sharp.swing.apps.el.beans.NewWord)" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" name="boolean lookupWord(org.sharp.swing.apps.el.beans.NewWord)" map="C"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" name="void indexWord(org.sharp.swing.apps.el.beans.NewWord)" map="D"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" name="void removeWordTag(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$NewWordHandler" name="org.sharp.swing.apps.el.beans.NewWord loadWord(java.lang.String)" map="C"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$VoicePronouncer" map="_B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$VoicePronouncer" name="void readVoice(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$LuceneSearch" map="_C"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$LuceneSearch" name="void searchKeyword(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$ArticlePersistHandler" map="_D"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$ArticlePersistHandler" name="org.sharp.swing.apps.el.beans.Article load(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$ArticlePersistHandler" name="void save(org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$9" map="9"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$9" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$9" name="org.sharp.swing.apps.el.beans.Article load(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$9" name="void save(org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$TagHandler" map="_E"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$TagHandler" name="void saveTag(org.sharp.swing.apps.el.beans.Tag)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$TagHandler" name="org.sharp.swing.apps.el.beans.Tag loadTag(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$8" map="8"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$8" name="this$0" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$8" name="void setInput(java.io.File)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$7" map="7"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$7" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$7" name="void saveTag(org.sharp.swing.apps.el.beans.Tag)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$7" name="org.sharp.swing.apps.el.beans.Tag loadTag(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$6" map="6"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$6" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$6" name="org.sharp.swing.apps.beans.RecentItems$Item[] recentFiles()" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$5" map="5"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$5" name="this$0" map="C"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$5" name="void setInput(java.io.File)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$4" map="4"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$4" name="void readVoice(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$3$1" map="1"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3$1" name="this$1" map="H"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3$1" name="val$nw" map="I"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3$1" name="java.lang.String id()" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3$1" name="org.apache.lucene.document.Document toDocument()" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3$1" name="java.lang.String docType()" map="C"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3$1" name="void close()" map="D"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" map="3"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="org.sharp.swing.apps.el.beans.NewWord findNewWordByIndexId(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="boolean removeWord(org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="void saveWord(org.sharp.swing.apps.el.beans.NewWord)" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="boolean lookupWord(org.sharp.swing.apps.el.beans.NewWord)" map="C"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="void indexWord(org.sharp.swing.apps.el.beans.NewWord)" map="D"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="void removeWordTag(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$3" name="org.sharp.swing.apps.el.beans.NewWord loadWord(java.lang.String)" map="C"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$2" map="2"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$2" name="void searchKeyword(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$11" map="11"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$11" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$11" name="void clearLuceneIndex()" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$11" name="void removeOldWords()" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$11" name="void importWords()" map="C"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$11" name="void indexNewWords()" map="D"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$10" map="10"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$10" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$10" name="java.util.List wordsWithDocName(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$10" name="java.lang.String[] docNames()" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$10" name="java.util.List pronunWords()" map="B"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$1" map="1"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime$1" name="this$0" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$1" name="void searchKeyword(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime$RecentFilePathsFetcher" map="_F"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime$RecentFilePathsFetcher" name="org.sharp.swing.apps.beans.RecentItems$Item[] recentFiles()" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$Runtime" map="_A"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="luceneFileSearcher" map="A"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="articleHandler" map="B"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="articles" map="C"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="dpp" map="D"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="dsp" map="E"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="dict" map="F"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="cp" map="G"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="lucene" map="H"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="rfpf" map="I"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="wordsTag" map="J"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="newWords" map="K"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="dtp" map="L"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="admin" map="M"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="fileChoosedByUser" map="N"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="oa7p" map="O"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="fileSelectedInSearchResultTable" map="P"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="wordHandler" map="Q"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="appCtx" map="R"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="tagHandler" map="S"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="sr" map="T"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="fcp" map="U"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="vp" map="V"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="dnwp" map="W"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="luceneNWSearcher" map="X"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="wtp" map="Y"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="config" map="Z"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="wordListGenerator" map="_"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="void access$200(org.sharp.swing.apps.el.DocReaderApp$Runtime, java.io.File, org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="void readWordVoice(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="void freshNewWordsPanel(java.io.File, org.sharp.swing.apps.el.beans.Article)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="void freshPhrasesPanel(java.io.File, org.sharp.swing.apps.el.beans.Article)" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="void access$100(org.sharp.swing.apps.el.DocReaderApp$Runtime, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="void access$300(org.sharp.swing.apps.el.DocReaderApp$Runtime, java.io.File, org.sharp.swing.apps.el.beans.Article)" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="boolean access$000(org.sharp.swing.apps.el.DocReaderApp$Runtime, org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$Runtime" name="boolean lookupNewWord(org.sharp.swing.apps.el.beans.NewWord)" map="A"/>
  <class name="org.sharp.swing.apps.el.DocReaderApp$1" map="1"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$1" name="void init(org.sharp.intf.AppContext)" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp$1" name="void exit()" map="A"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp" name="alc" map="O"/>
  <field class="org.sharp.swing.apps.el.DocReaderApp" name="runtime" map="P"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <method class="org.sharp.swing.apps.el.DocReaderApp" name="org.sharp.swing.apps.el.DocReaderApp$Runtime access$400(org.sharp.swing.apps.el.DocReaderApp)" map="A"/>
  <class name="org.sharp.swing.apps.el.OxfordA7WebDict$Parser$1" map="1"/>
  <field class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser$1" name="val$cla" map="val$cla"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser$1" name="boolean evaluate(java.lang.Object)" map="evaluate"/>
  <class name="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" map="_A"/>
  <field class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="showLog" map="A"/>
  <field class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="pos" map="B"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="void parseNG(net.htmlparser.jericho.Element)" map="A"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="void parseNGs(net.htmlparser.jericho.Element)" map="B"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String parseValue(net.htmlparser.jericho.Element, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String[] parseOptXRG(net.htmlparser.jericho.Element)" map="C"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="void parseSDGs(net.htmlparser.jericho.Element)" map="D"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="void parseHG(net.htmlparser.jericho.Element)" map="E"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="org.sharp.swing.apps.webdict2.beans.PartOfSpeech parse(java.io.Reader)" map="A"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.util.Map parsePOSs(java.io.Reader)" map="B"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.util.List getChildElements(net.htmlparser.jericho.Element, java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String[] parseChildValues(net.htmlparser.jericho.Element, java.lang.String)" map="C"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String[] parseValues(net.htmlparser.jericho.Element, java.lang.String)" map="D"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String[] parseXGs(net.htmlparser.jericho.Element)" map="F"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String[] parseXRs(net.htmlparser.jericho.Element)" map="G"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String parseOptValue(net.htmlparser.jericho.Element, java.lang.String)" map="E"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="java.lang.String[] parsePOS(net.htmlparser.jericho.Element)" map="H"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict$Parser" name="void log(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.el.OxfordA7WebDict" map="A"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict" name="org.sharp.swing.apps.webdict2.beans.Term lookup(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict" name="org.sharp.swing.apps.webdict2.beans.PartOfSpeech lookupPOS(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict" name="java.io.Reader fetchHtml(java.lang.String)" map="C"/>
  <method class="org.sharp.swing.apps.el.OxfordA7WebDict" name="void saveWordTo(java.lang.String, java.lang.String)" map="A"/>
  <package name="org.sharp.swing.apps.webdict" map="B"/>
  <class name="org.sharp.swing.apps.webdict.Expl$Sentence" map="_A"/>
  <field class="org.sharp.swing.apps.webdict.Expl$Sentence" name="cpart" map="A"/>
  <field class="org.sharp.swing.apps.webdict.Expl$Sentence" name="epart" map="B"/>
  <field class="org.sharp.swing.apps.webdict.Expl$Sentence" name="sentence" map="C"/>
  <method class="org.sharp.swing.apps.webdict.Expl$Sentence" name="java.lang.String getCpart()" map="A"/>
  <method class="org.sharp.swing.apps.webdict.Expl$Sentence" name="void setCpart(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.Expl$Sentence" name="void setEpart(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.Expl$Sentence" name="java.lang.String getEpart()" map="B"/>
  <method class="org.sharp.swing.apps.webdict.Expl$Sentence" name="java.lang.String toString()" map="toString"/>
  <class name="org.sharp.swing.apps.webdict.Expl" map="A"/>
  <field class="org.sharp.swing.apps.webdict.Expl" name="ses" map="A"/>
  <field class="org.sharp.swing.apps.webdict.Expl" name="parastart" map="B"/>
  <field class="org.sharp.swing.apps.webdict.Expl" name="streamend" map="C"/>
  <field class="org.sharp.swing.apps.webdict.Expl" name="r" map="D"/>
  <field class="org.sharp.swing.apps.webdict.Expl" name="paralen" map="E"/>
  <field class="org.sharp.swing.apps.webdict.Expl" name="formated" map="F"/>
  <method class="org.sharp.swing.apps.webdict.Expl" name="org.sharp.swing.apps.webdict.Expl$Sentence[] nextPara()" map="A"/>
  <method class="org.sharp.swing.apps.webdict.Expl" name="org.sharp.swing.apps.webdict.Expl format(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.Expl" name="boolean hasNextPara()" map="B"/>
  <class name="org.sharp.swing.apps.webdict.UserData" map="B"/>
  <field class="org.sharp.swing.apps.webdict.UserData" name="wordList" map="A"/>
  <field class="org.sharp.swing.apps.webdict.UserData" name="termRepeatCount" map="B"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="java.util.List getWordList4Review()" map="A"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="void setWordList(java.util.List)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="java.util.List getWordList4Key(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="org.sharp.swing.apps.webdict.OxfordUrlTerm lookup(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="org.sharp.swing.apps.webdict.UserData addNewTerm(org.sharp.swing.apps.webdict.OxfordUrlTerm)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="int totalwords()" map="B"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="org.sharp.swing.apps.webdict.UserData save(java.lang.String)" map="C"/>
  <method class="org.sharp.swing.apps.webdict.UserData" name="org.sharp.swing.apps.webdict.UserData scanTerms(org.sharp.swing.apps.webdict.beans.Config)" map="A"/>
  <class name="org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint" map="_A"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint" name="term" map="D"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint" name="java.lang.String hintword(java.lang.String, int)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint" name="java.lang.String hint(int)" map="A"/>
  <class name="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" map="_B"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="samplesSelected" map="A"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="lastrvt" map="B"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="lookupt" map="C"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="score" map="D"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="rvc" map="E"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="void oneMoreReview()" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint[] getSamplesSelected()" map="B"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="void oneLessReview()" map="C"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="int shouldReviewAfter()" map="D"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="java.util.Date getLastrvt()" map="E"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="int getScore()" map="F"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="java.util.Date getLookupt()" map="G"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="void setLookupt(java.util.Date)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="int schRvc()" map="H"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="int getRvc()" map="I"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="void setLastrvt(java.util.Date)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="void setRvc(int)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="void setSamplesSelected(org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint[])" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$TermExtra" name="void setScore(int)" map="B"/>
  <class name="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" map="1"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="val$term" map="A"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="explbegin" map="B"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="lastStart" map="C"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="val$word" map="D"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="brcount" map="E"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="lastText" map="F"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="void handleStartTag(javax.swing.text.html.HTML$Tag, javax.swing.text.MutableAttributeSet, int)" map="handleStartTag"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="void handleText(char[], int)" map="handleText"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="void handleSimpleTag(javax.swing.text.html.HTML$Tag, javax.swing.text.MutableAttributeSet, int)" map="handleSimpleTag"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm$1" name="void handleError(java.lang.String, int)" map="handleError"/>
  <class name="org.sharp.swing.apps.webdict.OxfordUrlTerm" map="C"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="expl" map="A"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="nsamples" map="B"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="info" map="C"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="asl" map="D"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="be" map="E"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="keyvoice" map="F"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="REVIEW_DAYS" map="G"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="samples" map="H"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="termdir" map="I"/>
  <field class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="key" map="J"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="boolean attachVoiceSave(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="void toDisk()" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="void format()" map="B"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="org.sharp.swing.apps.webdict.OxfordUrlTerm fromDisk(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="boolean havingKeyword(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="void rmFromDisk()" map="C"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="java.lang.String defof(org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="org.sharp.swing.apps.webdict.OxfordUrlTerm lookupOxford(java.lang.String, java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="int compareTo(org.sharp.swing.apps.webdict.OxfordUrlTerm)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.OxfordUrlTerm" name="void saveInfo()" map="D"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$9" map="9"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$9" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$9" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$8" map="8"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$8" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$7" map="7"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$7" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$6" map="6"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$6" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$5" map="5"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$5" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$4" map="4"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$3" map="3"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$2" map="2"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$10" map="10"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$10" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$10" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi$1" map="1"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$1" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi$1" name="int compare(org.sharp.swing.apps.webdict.OxfordUrlTerm, org.sharp.swing.apps.webdict.OxfordUrlTerm)" map="A"/>
  <class name="org.sharp.swing.apps.webdict.LookupUi" map="D"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="rvc" map="H"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="userdata" map="I"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="pron" map="J"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="wl" map="K"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="msg" map="L"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="smpi" map="M"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="msgTotal" map="N"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="msgSi" map="O"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="LOOKUPT_PREFIX" map="P"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="sentence" map="Q"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="RVC_PREFIX" map="R"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="text" map="S"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="prev" map="T"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="msgHi" map="U"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="next" map="V"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="cpi" map="W"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="reload" map="X"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="DEFAULT_MSG" map="Y"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="word" map="Z"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="lrvt" map="_"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="LRVT_PREFIX" map="a"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="expUi" map="b"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="config" map="c"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="lookupt" map="d"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="rand" map="e"/>
  <field class="org.sharp.swing.apps.webdict.LookupUi" name="tag" map="f"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void playVoice(int)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="org.sharp.swing.apps.webdict.OxfordUrlTerm term(int)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void showSentenceHint(int, int, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void learnWL()" map="D"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="int access$404(org.sharp.swing.apps.webdict.LookupUi)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="javax.swing.JTextField access$900(org.sharp.swing.apps.webdict.LookupUi)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void access$500(org.sharp.swing.apps.webdict.LookupUi, int, int, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void access$1100(org.sharp.swing.apps.webdict.LookupUi, int, int, boolean)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="int access$1000(org.sharp.swing.apps.webdict.LookupUi)" map="C"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="javax.swing.JTextField access$000(org.sharp.swing.apps.webdict.LookupUi)" map="D"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="org.sharp.swing.apps.webdict.UserData access$200(org.sharp.swing.apps.webdict.LookupUi)" map="E"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="javax.swing.JPanel getWorkPanel()" map="E"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="int access$1008(org.sharp.swing.apps.webdict.LookupUi)" map="F"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="javax.swing.JPanel getControlPanel()" map="F"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void access$600(org.sharp.swing.apps.webdict.LookupUi, int)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="java.util.List access$302(org.sharp.swing.apps.webdict.LookupUi, java.util.List)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="int access$400(org.sharp.swing.apps.webdict.LookupUi)" map="G"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void freshTermUI(int, int, boolean)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void message(java.lang.String, java.awt.Color)" map="A"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="int access$406(org.sharp.swing.apps.webdict.LookupUi)" map="H"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="int access$402(org.sharp.swing.apps.webdict.LookupUi, int)" map="B"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="javax.swing.JTextField access$1400(org.sharp.swing.apps.webdict.LookupUi)" map="I"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void access$1200(org.sharp.swing.apps.webdict.LookupUi, int)" map="C"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void access$700(org.sharp.swing.apps.webdict.LookupUi)" map="J"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="org.sharp.swing.apps.webdict.OxfordUrlTerm access$800(org.sharp.swing.apps.webdict.LookupUi, int)" map="D"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="java.util.List access$300(org.sharp.swing.apps.webdict.LookupUi)" map="K"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="void saveTerm(int)" map="C"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint access$1300(org.sharp.swing.apps.webdict.LookupUi, int)" map="E"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="javax.swing.JLabel access$100(org.sharp.swing.apps.webdict.LookupUi)" map="L"/>
  <method class="org.sharp.swing.apps.webdict.LookupUi" name="org.sharp.swing.apps.webdict.OxfordUrlTerm$SentenceHint sample(int)" map="D"/>
  <class name="org.sharp.swing.apps.dirSnaps.DirSnapsApp$Config" map="_A"/>
  <field class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$Config" name="cacheDir" map="A"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$Config" name="java.lang.String getCacheDir()" map="A"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$Config" name="void setCacheDir(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1$1" map="1"/>
  <field class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1$1" name="val$cf" map="A"/>
  <field class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1$1" name="this$1" map="B"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1$1" name="java.lang.String cacheDir()" map="A"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1$1" name="java.lang.String cacheFile(java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1" map="1"/>
  <field class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1" name="this$0" map="B"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1" name="void init(org.sharp.intf.AppContext)" map="A"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp$1" name="void exit()" map="A"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.apps.dirSnaps.DirSnapsApp" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <package name="org.sharp.swing.apps.webdict2.utils" map="A"/>
  <class name="org.sharp.swing.apps.webdict2.utils.VocChecker" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.utils.VocChecker" name="java.lang.String lookUpAndCopy(org.sharp.utils.beans.DirSnap, java.lang.String, java.lang.String)" map="A"/>
  <class name="org.sharp.swing.apps.webdict2.utils.OxfordWebDict" map="B"/>
  <method class="org.sharp.swing.apps.webdict2.utils.OxfordWebDict" name="org.sharp.swing.apps.webdict2.beans.Term lookup(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.utils.OxfordWebDict" name="java.io.Reader fetchHtml(java.lang.String)" map="D"/>
  <class name="org.sharp.swing.apps.webdict2.UserData$1" map="1"/>
  <method class="org.sharp.swing.apps.webdict2.UserData$1" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <method class="org.sharp.swing.apps.webdict2.UserData$1" name="int compare(org.sharp.swing.apps.webdict2.OxfordUrlTerm, org.sharp.swing.apps.webdict2.OxfordUrlTerm)" map="A"/>
  <class name="org.sharp.swing.apps.webdict2.UserData$RetCode" map="_A"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="EXAM_NO_SENTENCE" map="A"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="VOICE_NOT_FOUND" map="B"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="WEB_NOT_FOUND" map="C"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="OK" map="D"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="TERM_NOT_EXIST" map="E"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="$VALUES" map="F"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="EXAM_NORMAL" map="G"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="EXAM_LEARN_ENOUGH" map="H"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="EXAM_INPUTERROR" map="I"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="VOICE_FOUND" map="J"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="EXAM_LEARN_ALL" map="K"/>
  <field class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="LOCAL_FOUND" map="L"/>
  <method class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="org.sharp.swing.apps.webdict2.UserData$RetCode valueOf(java.lang.String)" map="valueOf"/>
  <method class="org.sharp.swing.apps.webdict2.UserData$RetCode" name="org.sharp.swing.apps.webdict2.UserData$RetCode[] values()" map="values"/>
  <class name="org.sharp.swing.apps.webdict2.UserData" map="A"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="conf" map="A"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="ap" map="B"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="wholeData" map="C"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="wd" map="D"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="smpi" map="E"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="cpi" map="F"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="wl" map="G"/>
  <field class="org.sharp.swing.apps.webdict2.UserData" name="termRepeatCount" map="H"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="boolean hasNext()" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="boolean toRandom()" map="B"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.UserData getWordList4Review(org.sharp.intf.WebDict, org.sharp.intf.AudioPlayer, org.sharp.swing.apps.webdict2.beans.Config)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.UserData scanTerms(org.sharp.swing.apps.webdict2.beans.Config)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.UserData addNewTerm(org.sharp.swing.apps.webdict2.OxfordUrlTerm)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="java.util.List getWordList4Key(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="boolean hasPrevious()" map="C"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="void saveTerm()" map="D"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.UserData$RetCode lookup(org.sharp.utils.FsUtils$DirSnaps, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.UserData$RetCode playVoice()" map="E"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.OxfordUrlTerm term(int)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.UserData$RetCode exam(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="int wordCount()" map="F"/>
  <method class="org.sharp.swing.apps.webdict2.UserData" name="org.sharp.swing.apps.webdict2.OxfordUrlTerm lookupLocal(java.lang.String)" map="C"/>
  <class name="org.sharp.swing.apps.webdict2.OxfordUrlTerm$2" map="2"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm$2" name="this$0" map="this$0"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm$2" name="val$ret" map="val$ret"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm$2" name="void execute(java.lang.Object)" map="execute"/>
  <class name="org.sharp.swing.apps.webdict2.OxfordUrlTerm$1" map="1"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm$1" name="this$0" map="this$0"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm$1" name="val$ret" map="val$ret"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm$1" name="void execute(java.lang.Object)" map="execute"/>
  <class name="org.sharp.swing.apps.webdict2.OxfordUrlTerm" map="B"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="samples" map="A"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="term" map="B"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="termdir" map="C"/>
  <field class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="info" map="D"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="org.sharp.swing.apps.webdict2.OxfordUrlTerm fromDisk(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="void toDisk()" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="java.lang.String[] defsAndExamples2()" map="B"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="boolean shouldReviewNow()" map="C"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="boolean attachVoiceSave(org.sharp.utils.FsUtils$DirSnaps, org.sharp.swing.apps.webdict2.beans.Config)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="java.lang.String htmlString()" map="D"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="java.lang.String explString()" map="E"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="void rmFromDisk()" map="F"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="org.sharp.swing.apps.webdict2.beans.Term fromDisk(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="java.lang.String toString()" map="toString"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="java.lang.String[] defsAndExamples()" map="G"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="int compareTo(org.sharp.swing.apps.webdict2.OxfordUrlTerm)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.sharp.swing.apps.webdict2.OxfordUrlTerm" name="void saveInfo()" map="H"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$UI" map="_A"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="rvc" map="A"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="pron" map="B"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="msg" map="C"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="msgTotal" map="D"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="msgSi" map="E"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="LOOKUPT_PREFIX" map="F"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="sentence" map="G"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="ending" map="H"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="RVC_PREFIX" map="I"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="text" map="J"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="ui" map="K"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="prev" map="L"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="next" map="M"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="msgHi" map="N"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="reload" map="O"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="DEFAULT_MSG" map="P"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="word" map="Q"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="LRVT_PREFIX" map="R"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="lrvt" map="S"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="expUi" map="T"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="beginning" map="U"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="lookupt" map="V"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="rand" map="W"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$UI" name="tag" map="X"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$9" map="9"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$9" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$9" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$8" map="8"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$8" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$7" map="7"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$7" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$6" map="6"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$6" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$15" map="15"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$15" name="this$0" map="D"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$15" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$15" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$15" name="java.lang.String tabDescription()" map="C"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$5" map="5"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$5" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$14" map="14"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$14" name="this$0" map="C"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$14" name="void init(org.sharp.intf.AppContext)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$14" name="void exit()" map="A"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$13" map="13"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$13" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$13" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$4" map="4"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$12" map="12"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$12" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$12" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$3" map="3"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$2" map="2"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$11" map="11"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$11" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$11" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$10" map="10"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$10" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$10" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.webdict2.WebDictApp$1" map="1"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp" name="userdata" map="Q"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp" name="dirSnaps" map="R"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp" name="config" map="S"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp" name="appCtx" map="T"/>
  <field class="org.sharp.swing.apps.webdict2.WebDictApp" name="ui" map="U"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="javax.swing.JPanel getMainPanel()" map="F"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="void access$100(org.sharp.swing.apps.webdict2.WebDictApp, int)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="javax.swing.JPanel getNaviPanel()" map="G"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="javax.swing.JPanel getLearnPanel()" map="H"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="org.sharp.swing.apps.webdict2.beans.Config access$400(org.sharp.swing.apps.webdict2.WebDictApp)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="void message(java.lang.String, java.awt.Color)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="void access$300(org.sharp.swing.apps.webdict2.WebDictApp, org.sharp.swing.apps.webdict2.UserData$RetCode)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="void access$200(org.sharp.swing.apps.webdict2.WebDictApp)" map="B"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="void playVoice()" map="I"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="void freshTermUI(int)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="void showSentenceHint(org.sharp.swing.apps.webdict2.UserData$RetCode)" map="A"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="javax.swing.JPanel access$500(org.sharp.swing.apps.webdict2.WebDictApp)" map="C"/>
  <method class="org.sharp.swing.apps.webdict2.WebDictApp" name="org.sharp.swing.apps.webdict2.beans.Config access$402(org.sharp.swing.apps.webdict2.WebDictApp, org.sharp.swing.apps.webdict2.beans.Config)" map="A"/>
  <package name="org.sharp.swing.apps.bean2ui.sample" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.sample.SampleBean" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="publicint" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="readonly" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="string" map="C"/>
  <field class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="integer" map="D"/>
  <field class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="staticm" map="E"/>
  <field class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="iarray" map="F"/>
  <field class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="writeable" map="G"/>
  <method class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="int[] getIarray()" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="void setId(java.lang.Integer)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="void setName(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="java.lang.String getName()" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="java.lang.Integer getId()" map="C"/>
  <method class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="java.lang.Boolean getReadonly()" map="D"/>
  <method class="org.sharp.swing.apps.bean2ui.sample.SampleBean" name="void setWriteable(boolean)" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$4" map="4"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi$4" name="this$0" map="E"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$4" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$4" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$4" name="java.lang.String tabDescription()" map="C"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$3" map="3"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$3" name="javax.swing.table.TableCellEditor getCellEditor(int, int)" map="getCellEditor"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$3" name="javax.swing.table.TableCellRenderer getCellRenderer(int, int)" map="getCellRenderer"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$2" map="2"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$1" map="1"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiRendor" map="_A"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiRendor" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiRendor" name="java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)" map="getTableCellRendererComponent"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$EventListener" map="_B"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$EventListener" name="void event(org.sharp.swing.apps.bean2ui.ClassUi)" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiEditor$1" map="1"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiEditor$1" name="this$1" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiEditor$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiEditor" map="_C"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiEditor" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiEditor" name="java.awt.Component getTableCellEditorComponent(javax.swing.JTable, java.lang.Object, boolean, int, int)" map="getTableCellEditorComponent"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi$MethodUiEditor" name="java.lang.Object getCellEditorValue()" map="getCellEditorValue"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi" name="listener" map="V"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi" name="scrlp" map="W"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi" name="clazs" map="X"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="javax.swing.JScrollPane access$100(org.sharp.swing.apps.bean2ui.ClassUi)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="javax.swing.JTable getCertainMethodTable(java.lang.Class, int)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="java.lang.Class access$000(org.sharp.swing.apps.bean2ui.ClassUi)" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="void setListener(org.sharp.swing.apps.bean2ui.ClassUi$EventListener)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="org.sharp.swing.apps.bean2ui.ClassUi$EventListener getListener()" map="J"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="java.awt.Container getUi()" map="K"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi" name="javax.swing.JTable getConstructorTable(java.lang.Class)" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.VMUI" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.VMUI" name="jdp" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.VMUI" name="appWorkArea" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.VMUI" name="void start()" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2_1$2" map="2"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2_1$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2_1$1" map="1"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2_1$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2_1$EventListener" map="_A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1$EventListener" name="void event(org.sharp.swing.apps.bean2ui.ClassUi2_1)" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2_1" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="listener" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="scrlp" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="clazs" map="C"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="javax.swing.JScrollPane access$100(org.sharp.swing.apps.bean2ui.ClassUi2_1)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="java.lang.Class access$000(org.sharp.swing.apps.bean2ui.ClassUi2_1)" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="javax.swing.JPanel getMethodTable(java.lang.Class, int)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="org.sharp.swing.apps.bean2ui.ClassUi2_1$EventListener getListener()" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="void setListener(org.sharp.swing.apps.bean2ui.ClassUi2_1$EventListener)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2_1" name="java.awt.Container getUI(java.lang.Class)" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$5" map="5"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$5" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$5" name="jumpUiEditor" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$5" name="jumpUiRender" map="C"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$5" name="javax.swing.table.TableCellEditor getCellEditor(int, int)" map="getCellEditor"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$5" name="javax.swing.table.TableCellRenderer getCellRenderer(int, int)" map="getCellRenderer"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$4" map="4"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$4" name="boolean isCellEditable(int, int)" map="isCellEditable"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$3" map="3"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$2" map="2"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$1" map="1"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor$1" map="1"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor$1" name="val$table" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor$1" name="val$row" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor$1" name="val$column" map="C"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor$1" name="this$1" map="D"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor" map="_A"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor" name="converter" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor" name="serialVersionUID" map="C"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor" name="java.awt.Component getTableCellEditorComponent(javax.swing.JTable, java.lang.Object, boolean, int, int)" map="getTableCellEditorComponent"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor" name="java.lang.Object getCellEditorValue()" map="getCellEditorValue"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor" name="org.sharp.swing.apps.bean2ui.BeanUi access$100(org.sharp.swing.apps.bean2ui.BeanUi$JumpUiEditor)" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender$1" map="1"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender$1" name="val$table" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender$1" name="val$row" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender$1" name="val$column" map="C"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender$1" name="this$1" map="D"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender" map="_B"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender" name="this$0" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender" name="converter" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender" name="serialVersionUID" map="C"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender" name="org.sharp.swing.apps.bean2ui.BeanUi access$000(org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi$JumpUiRender" name="java.awt.Component getTableCellRendererComponent(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)" map="getTableCellRendererComponent"/>
  <class name="org.sharp.swing.apps.bean2ui.BeanUi" map="C"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi" name="uiList" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi" name="currentUi" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.BeanUi" name="fartherUi" map="C"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi" name="javax.swing.JTable getCertainMethodTable(java.lang.Class, int)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi" name="javax.swing.JTable getJTable(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi" name="javax.swing.JTable getConstructorTable(java.lang.Class)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi" name="void log(java.lang.Object[])" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi" name="java.awt.Container getUI(java.lang.Object)" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi" name="void setFartherUi(java.awt.Container)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.BeanUi" name="void updateUI(java.lang.Object)" map="C"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2$2" map="2"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2$1" map="1"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2$1" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2$EventListener" map="_A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2$EventListener" name="void event(org.sharp.swing.apps.bean2ui.ClassUi2)" map="A"/>
  <class name="org.sharp.swing.apps.bean2ui.ClassUi2" map="D"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2" name="listener" map="A"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2" name="scrlp" map="B"/>
  <field class="org.sharp.swing.apps.bean2ui.ClassUi2" name="clazs" map="C"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2" name="java.lang.Class access$000(org.sharp.swing.apps.bean2ui.ClassUi2)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2" name="javax.swing.JPanel getMethodTable(java.lang.Class, int)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2" name="org.sharp.swing.apps.bean2ui.ClassUi2$EventListener getListener()" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2" name="javax.swing.JScrollPane access$100(org.sharp.swing.apps.bean2ui.ClassUi2)" map="B"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2" name="void setListener(org.sharp.swing.apps.bean2ui.ClassUi2$EventListener)" map="A"/>
  <method class="org.sharp.swing.apps.bean2ui.ClassUi2" name="java.awt.Container getUI(java.lang.Class)" map="A"/>
  <package name="org.sharp.swing.apps.win" map="C"/>
  <package name="org.sharp.swing.apps.win.dcom" map="A"/>
  <class name="org.sharp.swing.apps.win.dcom.LnkUi" map="A"/>
  <method class="org.sharp.swing.apps.win.dcom.LnkUi" name="java.awt.Container getUI()" map="A"/>
  <package name="org.sharp.swing.apps.jpwords" map="D"/>
  <class name="org.sharp.swing.apps.jpwords.UserData" map="A"/>
  <field class="org.sharp.swing.apps.jpwords.UserData" name="wordList" map="A"/>
  <field class="org.sharp.swing.apps.jpwords.UserData" name="config" map="B"/>
  <field class="org.sharp.swing.apps.jpwords.UserData" name="termRepeatCount" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="void setWordList(java.util.List)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="org.sharp.swing.apps.jpwords.UserData load(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="org.sharp.swing.apps.jpwords.UserData scanJpwords()" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="org.sharp.swing.apps.jpwords.UserData save(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="org.sharp.swing.apps.jpwords.UserData addNewTerm(org.sharp.swing.apps.jpwords.JpTerm)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="java.util.List getWordList(int)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="org.sharp.swing.apps.jpwords.UserData searchJpwords()" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.UserData" name="org.sharp.swing.apps.jpwords.JpTerm lookup(java.lang.String)" map="C"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$9" map="9"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$9" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$9" name="void keyTyped(java.awt.event.KeyEvent)" map="keyTyped"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$8" map="8"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$8" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$8" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$7" map="7"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$7" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$6" map="6"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$6" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$5" map="5"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$5" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$4" map="4"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$4" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$4" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$3" map="3"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$3" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$3" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$2" map="2"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$2" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$2" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi$1" map="1"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi$1" name="this$0" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi$1" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <class name="org.sharp.swing.apps.jpwords.JpwordsUi" map="B"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="LOADT_PREFIX" map="g"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="level" map="h"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="userdata" map="i"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="pron" map="j"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="wl" map="k"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="msg" map="l"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="LEVEL_PREFIX" map="m"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="MODE_EDIT_EXPL" map="n"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="smpi" map="o"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="msgSi" map="p"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="load" map="q"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="loadt" map="r"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="sentence" map="s"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="text" map="t"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="mode" map="u"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="prev" map="v"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="MODE_TEST" map="w"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="next" map="x"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="cpi" map="y"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="DEFAULT_MSG" map="z"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="lrvt" map="&#x00a2;"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="LRVT_PREFIX" map="&#x00a3;"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="expUi" map="&#x00a4;"/>
  <field class="org.sharp.swing.apps.jpwords.JpwordsUi" name="rand" map="&#x00a5;"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="int access$302(org.sharp.swing.apps.jpwords.JpwordsUi, int)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void access$500(org.sharp.swing.apps.jpwords.JpwordsUi, int, int, boolean)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void access$1100(org.sharp.swing.apps.jpwords.JpwordsUi, int)" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="int access$306(org.sharp.swing.apps.jpwords.JpwordsUi)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="javax.swing.JTextField access$800(org.sharp.swing.apps.jpwords.JpwordsUi)" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="javax.swing.JPanel getWorkPanel()" map="G"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void freshWorkPanel(int, int, boolean)" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void playVoice()" map="H"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="javax.swing.JPanel getControlPanel()" map="I"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="org.sharp.swing.apps.jpwords.UserData access$002(org.sharp.swing.apps.jpwords.JpwordsUi, org.sharp.swing.apps.jpwords.UserData)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="org.sharp.swing.apps.jpwords.JpTerm term(int)" map="E"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="org.sharp.swing.apps.jpwords.JpTerm access$600(org.sharp.swing.apps.jpwords.JpwordsUi, int)" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="int access$702(org.sharp.swing.apps.jpwords.JpwordsUi, int)" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void freshTermUI(int, int, boolean)" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="int access$300(org.sharp.swing.apps.jpwords.JpwordsUi)" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="int access$900(org.sharp.swing.apps.jpwords.JpwordsUi)" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="javax.swing.JLabel access$1200(org.sharp.swing.apps.jpwords.JpwordsUi)" map="E"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="org.sharp.swing.apps.jpwords.UserData access$000(org.sharp.swing.apps.jpwords.JpwordsUi)" map="F"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void access$1000(org.sharp.swing.apps.jpwords.JpwordsUi, int, int, boolean)" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void access$200(org.sharp.swing.apps.jpwords.JpwordsUi)" map="G"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void access$100(org.sharp.swing.apps.jpwords.JpwordsUi, org.sharp.swing.apps.jpwords.UserData, int)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="java.util.List access$400(org.sharp.swing.apps.jpwords.JpwordsUi)" map="H"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void saveTerm(int)" map="F"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="int access$700(org.sharp.swing.apps.jpwords.JpwordsUi)" map="I"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="int access$304(org.sharp.swing.apps.jpwords.JpwordsUi)" map="J"/>
  <method class="org.sharp.swing.apps.jpwords.JpwordsUi" name="void freshWordList(org.sharp.swing.apps.jpwords.UserData, int)" map="A"/>
  <class name="org.sharp.swing.apps.jpwords.Deployer" map="C"/>
  <class name="org.sharp.swing.apps.jpwords.JpTerm$Expl" map="_A"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="partofspeech" map="A"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="error" map="B"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="meaning" map="C"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="katakana" map="D"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="writting" map="E"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="hiragana" map="F"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String access$000(org.sharp.swing.apps.jpwords.JpTerm$Expl)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="void setMeaning(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String getHiragana()" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="void setWritting(java.lang.String)" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="void setError(boolean)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String getPartofspeech()" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="org.sharp.swing.apps.jpwords.JpTerm$Expl parse(java.lang.String)" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="void setKatakana(java.lang.String)" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="boolean isError()" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String getKatakana()" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String access$100(org.sharp.swing.apps.jpwords.JpTerm$Expl)" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String toString()" map="toString"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="void setPartofspeech(java.lang.String)" map="E"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String getWritting()" map="E"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="java.lang.String getMeaning()" map="F"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$Expl" name="void setHiragana(java.lang.String)" map="F"/>
  <class name="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" map="_B"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="lastrvt" map="A"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="lookupt" map="B"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="score" map="C"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="level" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="int getLevel()" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="java.util.Date getLastrvt()" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="int getScore()" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="java.util.Date getLookupt()" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="void setLookupt(java.util.Date)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="int schRvc()" map="E"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="void oneLevelUp()" map="F"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="void setLevel(int)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="void setLastrvt(java.util.Date)" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="void oneLevelDown()" map="G"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm$TermExtra" name="void setScore(int)" map="B"/>
  <class name="org.sharp.swing.apps.jpwords.JpTerm" map="D"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm" name="keyvoice" map="A"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm" name="REVIEW_DAYS" map="B"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm" name="key" map="C"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm" name="oExpl" map="D"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm" name="termdir" map="E"/>
  <field class="org.sharp.swing.apps.jpwords.JpTerm" name="info" map="F"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="void save()" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="org.sharp.swing.apps.jpwords.JpTerm fromDisk(java.lang.String, java.lang.String)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="java.lang.String writting()" map="B"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="int compareTo(org.sharp.swing.apps.jpwords.JpTerm)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="void rmFromDisk()" map="C"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="void cpVoice()" map="D"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="java.lang.String spellHint()" map="E"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="org.sharp.swing.apps.jpwords.JpTerm createByMp3(java.lang.String, java.io.File)" map="A"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="org.sharp.swing.apps.jpwords.JpTerm" name="java.lang.String expl()" map="F"/>
  <class name="org.sharp.swing.apps.crossword.PuzzleDisplay" map="A"/>
  <field class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="puzzleBox" map="A"/>
  <field class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="clueBox" map="B"/>
  <field class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="puzzle" map="C"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="boolean areCluesShown()" map="A"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="boolean areKeysShown()" map="B"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="edu.ncsu.csc517.dpp11.gui.ClueBox getClueBox()" map="C"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="void print()" map="D"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="edu.ncsu.csc517.dpp11.data.Puzzle getPuzzle()" map="E"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="void setKeysShown(boolean)" map="A"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="void setCluesShown(boolean)" map="B"/>
  <method class="org.sharp.swing.apps.crossword.PuzzleDisplay" name="edu.ncsu.csc517.dpp11.gui.PuzzleBox getPuzzleBox()" map="F"/>
  <class name="org.sharp.swing.apps.crossword.CrosswordUi$1" map="1"/>
  <field class="org.sharp.swing.apps.crossword.CrosswordUi$1" name="this$0" map="F"/>
  <method class="org.sharp.swing.apps.crossword.CrosswordUi$1" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.swing.apps.crossword.CrosswordUi$1" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.crossword.CrosswordUi$1" name="java.lang.String tabDescription()" map="C"/>
  <method class="org.sharp.swing.apps.crossword.CrosswordUi" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.apps.crossword.CrosswordUi" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <method class="org.sharp.swing.apps.crossword.CrosswordUi" name="java.awt.Container getUi()" map="L"/>
  <class name="org.sharp.swing.apps.graph.Sample$1" map="1"/>
  <field class="org.sharp.swing.apps.graph.Sample$1" name="this$0" map="G"/>
  <method class="org.sharp.swing.apps.graph.Sample$1" name="java.lang.String tabName()" map="B"/>
  <method class="org.sharp.swing.apps.graph.Sample$1" name="java.awt.Container getUI()" map="A"/>
  <method class="org.sharp.swing.apps.graph.Sample$1" name="java.lang.String tabDescription()" map="C"/>
  <method class="org.sharp.swing.apps.graph.Sample" name="org.sharp.intf.Pluggable$TabbedUI tabbedUI()" map="A"/>
  <method class="org.sharp.swing.apps.graph.Sample" name="org.sharp.intf.Pluggable$AppLifeCycle lifeCycle()" map="B"/>
  <method class="org.sharp.swing.apps.graph.Sample" name="java.awt.Container getUi()" map="M"/>
  <package name="org.sharp.swing.apps.cslideingblock" map="E"/>
  <class name="org.sharp.swing.apps.cslideingblock.ChineseSlidingBlock$Board" map="_A"/>
  <method class="org.sharp.swing.apps.cslideingblock.ChineseSlidingBlock$Board" name="void paint(java.awt.Graphics)" map="paint"/>
  <class name="org.sharp.swing.apps.cslideingblock.ChineseSlidingBlock" map="A"/>
  <method class="org.sharp.swing.apps.cslideingblock.ChineseSlidingBlock" name="java.awt.Container getUI()" map="A"/>
  <class name="org.sharp.swing.Console$6" map="6"/>
  <field class="org.sharp.swing.Console$6" name="val$frame" map="A"/>
  <method class="org.sharp.swing.Console$6" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.Console$5" map="5"/>
  <field class="org.sharp.swing.Console$5" name="val$toolbar" map="A"/>
  <field class="org.sharp.swing.Console$5" name="val$panel" map="B"/>
  <method class="org.sharp.swing.Console$5" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <class name="org.sharp.swing.Console$4" map="4"/>
  <method class="org.sharp.swing.Console$4" name="java.lang.Object f(java.lang.Object)" map="f"/>
  <method class="org.sharp.swing.Console$4" name="org.sharp.intf.Pluggable f(java.lang.String)" map="f"/>
  <class name="org.sharp.swing.Console$3" map="3"/>
  <method class="org.sharp.swing.Console$3" name="java.lang.String f(org.sharp.intf.Pluggable)" map="f"/>
  <method class="org.sharp.swing.Console$3" name="java.lang.Object f(java.lang.Object)" map="f"/>
  <class name="org.sharp.swing.Console$2" map="2"/>
  <method class="org.sharp.swing.Console$2" name="void windowClosing(java.awt.event.WindowEvent)" map="windowClosing"/>
  <class name="org.sharp.swing.Console$1" map="1"/>
  <field class="org.sharp.swing.Console$1" name="sharedObjects" map="A"/>
  <method class="org.sharp.swing.Console$1" name="java.lang.Object getConfig(java.lang.String, java.lang.Class)" map="A"/>
  <method class="org.sharp.swing.Console$1" name="java.lang.Object requestObject(java.lang.Class)" map="A"/>
  <method class="org.sharp.swing.Console$1" name="void saveConfig(java.lang.String, java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.Console$1" name="void shareObject(java.lang.Object)" map="A"/>
  <method class="org.sharp.swing.Console$1" name="java.lang.String dataDirPath()" map="A"/>
  <class name="org.sharp.swing.Console$7" map="7"/>
  <field class="org.sharp.swing.Console$7" name="val$frame" map="A"/>
  <method class="org.sharp.swing.Console$7" name="void actionPerformed(java.awt.event.ActionEvent)" map="actionPerformed"/>
  <field class="org.sharp.swing.Console" name="modules" map="A"/>
  <field class="org.sharp.swing.Console" name="CONF_FILENAME" map="B"/>
  <field class="org.sharp.swing.Console" name="appContext" map="C"/>
  <field class="org.sharp.swing.Console" name="dict" map="D"/>
  <method class="org.sharp.swing.Console" name="javax.swing.JPanel getMainPanel()" map="A"/>
  <method class="org.sharp.swing.Console" name="org.sharp.intf.Pluggable[] loadModules(java.lang.String)" map="A"/>
  <method class="org.sharp.swing.Console" name="void initToolbar(javax.swing.JPanel)" map="A"/>
  <method class="org.sharp.swing.Console" name="org.sharp.intf.Pluggable[] loadModules()" map="B"/>
  <method class="org.sharp.swing.Console" name="void startSwingUI()" map="C"/>
  <method class="org.sharp.swing.Console" name="java.awt.Component getTabs()" map="D"/>
  <method class="org.sharp.swing.Console" name="org.sharp.swing.apps.webdict.LookupUi access$000()" map="E"/>
  <method class="org.sharp.swing.Console" name="org.sharp.intf.Pluggable[] modules()" map="F"/>
  <method class="org.sharp.swing.Console" name="org.sharp.intf.Pluggable[] loadModules(java.io.Reader)" map="A"/>
  <method class="org.sharp.swing.Console" name="void saveModules(java.lang.String, org.sharp.intf.Pluggable[])" map="A"/>
  <method class="org.sharp.swing.Console" name="void initMenus(javax.swing.JFrame)" map="A"/>
  <package name="org.sharp.jdk" map="E"/>
  <package name="org.sharp.jdk.test" map="A"/>
  <class name="org.sharp.jdk.test.Editable" map="A"/>
  <method class="org.sharp.jdk.test.Editable" name="void setEditable(boolean)" map="A"/>
  <method class="org.sharp.jdk.test.Editable" name="boolean isEditable()" map="A"/>
  <class name="org.sharp.jdk.test.InterfaceTest$1" map="1"/>
  <method class="org.sharp.jdk.test.InterfaceTest$1" name="void setEditable(boolean)" map="A"/>
  <method class="org.sharp.jdk.test.InterfaceTest$1" name="boolean isEditable()" map="A"/>
  <class name="org.sharp.jdk.test.InterfaceTest" map="B"/>
  <method class="org.sharp.jdk.test.InterfaceTest" name="void main(java.lang.String[])" map="A"/>
</map>
</yguard>
